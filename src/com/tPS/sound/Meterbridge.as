/** * Abstract Meterbridge * @author	tPS * @version 1 **/import com.tPS.tween.Thread;import com.tPS.utils.ValueCollector; class com.tPS.sound.Meterbridge{	private var peakmode:String;	private var peaksustain:Number;	private var resolution:Number;	private var leds:Array;	private var currentPeak:Number;	private var storedPeak:Number;	private var t:Number;	private var valueCollector:ValueCollector;		function Meterbridge($res:Number,$pkmode:String,$sustain:Number){		resolution = ($res!=undefined) ? $res : 10;		peakmode = ($pkmode!=undefined) ? $pkmode : "normal";		peaksustain = ($sustain!=undefined) ? $sustain : 30;		setup();			}		private function init():Void{		leds = [];		var i:Number = resolution;		while(--i>-1){			leds[i] = 0;		}		currentPeak = 0;		storedPeak = 0;		t = 0;	}		private function setup():Void{		valueCollector = new ValueCollector(this);		init();	}		public function onSoundUpdate($level:Number):Void{		currentPeak = $level;		setMeter();		update();	}		private function setMeter():Void{		var pk:Number = Math.round((currentPeak/100) * resolution); 		pk --;		var i:Number = resolution;		while(--i>-1){			if(i<=pk){				leds[i] = 1;			}else{				leds[i] = 0;			}		}		setPeak(pk);	}		private function setPeak(pk:Number):Void{		switch(peakmode){			case "normal":			leds[pk] = 2;									break;			case "hold":			currentPeak = valueCollector.getPeakHold();									leds[Math.round((currentPeak/100) * resolution)-1] = 2;									break;			case "sustained":		currentPeak = calcSustainedPeak();									leds[Math.round((currentPeak/100) * resolution)-1] = 2;									break;		}	}		private function calcSustainedPeak():Number{		var newPk:Number = 0;		if(t<peaksustain){			if(currentPeak > storedPeak){				newPk = storedPeak = currentPeak;								t = 0;			}else{				newPk = storedPeak;				t ++;			}		}else{			storedPeak = 0;			newPk = storedPeak			if(newPk < 0 ){				newPk = 0;			}			t = 0;		}		return newPk;	}		private function update():Void{	}		function set _resolution($res:Number):Void{		resolution = $res;		init();	}		function set _peakmode(info:Object):Void{		peakmode = info.peakmode;		peaksustain = info.sustain;		if(peakmode != "normal"){			valueCollector.start();		}else{			valueCollector.kill();		}	}		function getValue():Number{		return currentPeak;	}	}