/** * Abstract Form Class * @author tPS * @version 1 **/import com.tPS.ui.form.*;class com.tPS.ui.form.GenericForm extends com.tPS.event.AeventSource{	//props	private var formFields:Array;	//constructor	function GenericForm(){		super();		init();	}		public function init():Void{		formFields = [];	}	public function registerFormField($ffd:IFormField):Number{		formFields.push($ffd);		return formFields.length-1;	}	public function validateForm(Void):Boolean{		var isValid:Boolean = true;		for(var i=0; i<formFields.length; i++){			if(!formFields[i].validate()){				isValid = false;				formFields[i].mark(true);			}else{				formFields[i].mark(false);			}		}		trace("validate form: " + isValid);				return isValid;	}	public function submitForm():Void{		if(validateForm()){			broadcastMessage("onFormSubmit");		}else{			trace("popup");			broadcastMessage("onShowAlert",{code:"invalidForm"});		}	}	public function closeOtherPulldowns($fID:Number){		for(var i=0; i<formFields.length; i++){			if(formFields[i].isCombo != undefined && formFields[i].isOpened == true){				formFields[i].close();			}		}	}		private function onKeyUp() : Void {		if(Key.getCode() == Key.ENTER){			submitForm();		}	}		public function get _formFields() : Array {		return formFields;	}		public function get _fieldCounter() : Number {		return formFields.length;	}}