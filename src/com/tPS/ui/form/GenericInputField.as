import com.tPS.event.Delegate;/** * Abstract Input Field Class * @author tPS * @version 1.1 **/class com.tPS.ui.form.GenericInputField extends com.tPS.ui.GenericLibraryElement implements com.tPS.ui.form.IFormField{	//props	private var inputText:TextField;	private var labelText:TextField;	private var $maxChars:Number;	private var $tab:Number;	private var $fieldID:Number;	private var type:String;	private var isRequired:Boolean;	private var enabled:Boolean;	private var form:com.tPS.ui.form.GenericForm;	static private var numbers:String = "0123456789TMJ";	//constructor	function GenericInputField($rt:MovieClip){		super($rt);		inputText = _rt.inputText;		labelText = _rt.labelText;		decorateFocusFunctions();	}	public function init($form:com.tPS.ui.form.GenericForm,$mxChrs:Number,$type:String,$isReq:Boolean,tabindex:Number,$pass:Boolean){		form = $form;		$fieldID = form.registerFormField(this);		inputText.maxChars = ($mxChrs != undefined) ? $mxChrs : 45;		type = ($type != undefined) ? $type : "standart";		isRequired = ($isReq != undefined) ? $isReq : false;		inputText.password = ($pass != undefined && $pass) ? true : false;						if($type == "date"){			inputText.restrict = numbers;		}		$tab = tabindex;		inputText.tabIndex = $tab;			}	//methods	private function decorateFocusFunctions() : Void {		inputText.onSetFocus = Delegate.create(this, highlight, true);		inputText.onKillFocus = Delegate.create(this, highlight, false);		inputText.onChanged = Delegate.create(this, isChanged);		inputText.tabEnabled = true;	}	function validate() : Boolean {		var isValid:Boolean = true;		if(isRequired){			switch(type){				case "standart":					if(getValue().length == 0){						isValid = false;					}					break;				case "email":					//check for @					isValid = checkEmailAdress();					var t = getValue();					var i:Number = 0;					var inx:Number = t.indexOf("@");					while(inx != -1){						i++;						t = t.substring(0,inx)+t.substr(inx+1);						inx = t.indexOf("@");					}					if(i!=1){						isValid = false;						break;					}					//checkfor . after @					var t = getValue();					var i:Number = 0;					var inx:Number = t.indexOf("@");					t = t.substring(0,inx)+t.substr(inx+1);					inx = t.indexOf(".");					while(inx != -1){						i++;						t = t.substring(0,inx)+t.substr(inx+1);						inx = t.indexOf(".");					}					if(i<1){						isValid = false;						break;					}					break;				case "date":						if(getValue().length == 0){						isValid = false;					}					break;				default:					if(getValue().length == 0){						isValid = false;					}					break;			}		}		return isValid;	}	function mark($dir:Boolean):Void{		if($dir){		}else{		}	}	function highlight($dir:Boolean):Void{		if($dir){		}else{		}	}	function isChanged() : Void {		var evtObj = {type:"changed",target:this};		//dispatchEvent(evtObj);	}		function set _labelText($label:String):Void{		labelText.htmlText = $label;	}	function getValue():Object{		return inputText.text;	}	function setValue(t:String){		inputText.text = t;	}		function set _enabled($en:Boolean){		enabled = $en;		if(!enabled){			inputText.type = "dynamic";		}else{			inputText.type = "input";		}	}		public function setInputFocus() : Void {		Selection.setFocus(inputText);	}		private function checkEmailAdress() : Boolean {				//email address has to have at least 5 chars		if (inputText.length < 5)		{			return false;		}			var iChars:String = "*|,\":<>[]{}`';()&$#%";		var eLength = inputText.length;			for (var i=0; i < eLength; i++)		{			if (iChars.indexOf(inputText.charAt(i)) != -1)			{				trace("Invalid Email Address : Illegal Character in Email Address : -->" + inputText.charAt(i) + "<--.");				return false;			}		}			var atIndex = inputText.lastIndexOf("@");		if(atIndex < 1 || (atIndex == eLength - 1))		{			trace("Invalid Email Address : Email Address must contain @ as at least the second chararcter.");			return false;		}			var pIndex = inputText.lastIndexOf(".");		if(pIndex < 4 || (pIndex == eLength - 1))		{			trace("Invalid Email Address : Email Address must contain at least one . (period) in a valid position");			return false;		}			if(atIndex > pIndex)		{			trace("Invalid Email Address : Email Address must be in the form of name@domain.domaintype");			return false;		}			return true;	}}