/** * PositionCalculator Class * @author	tPS * @version 1 **/import de.oolanoo.event.Delegate;import com.lo9ic.Quaternion;class com.tPS.threeD.utils.PositionCalculator{	//props	static private var instance:com.tPS.threeD.utils.PositionCalculator;	private var focalDistance:Number;		private function PositionCalculator($f:Number){		focalDistance = $f;			}		static public function initialize($f:Number):com.tPS.threeD.utils.PositionCalculator{		if(instance == undefined){			instance = new com.tPS.threeD.utils.PositionCalculator($f);		}		return instance;	}		static public function getCoordsFromPos($sx:Number,$sy:Number,$z:Number,$coord:Quaternion,$width:Number,$align:Number):Quaternion{		return instance.calc3dPos($sx,$sy,$z,$coord,$width,$align);	}		static public function getWidthAt($coord:Quaternion, $width):Number{		return instance.calcObjEndWidth($coord,$width);	}		private function calc3dPos($sxx:Number,$sy:Number,$z:Number,$coord:Quaternion,$width:Number,$align:Number):Quaternion{		var endPos = new Quaternion();		endPos.fromPoint($coord.x,$coord.y,$z);		var endWidth:Number = calcObjEndWidth(endPos, $width);		var $sx:Number = $sxx;		switch($align){			case 0:		$sx +=  endWidth/2;						break;			case 1:		break;			case 2:		$sx -=  endWidth/2;						break;		}				var $3x,$3y:Number;		$3x = ($sx*($z-focalDistance))/focalDistance;		$3y = ($sy*($z-focalDistance))/focalDistance;				return new Quaternion($3x,$3y,$z,0);	}		private function calcObjEndWidth($coord:Quaternion, $width:Number):Number{				var screenX:Number = focalDistance * $coord.x / ($coord.z - focalDistance);		var screenX2:Number = focalDistance * ($coord.x + $width) / ($coord.z - focalDistance);		return -(screenX2 - screenX);			}}