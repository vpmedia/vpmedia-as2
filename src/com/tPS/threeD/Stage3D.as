/** * 3D Stage Class * @author tPS * @version 1 **/import com.lo9ic.Quaternion;import com.tPS.threeD.camera.Lens;import com.tPS.threeD.iRenderable;import com.tPS.threeD.Abstract3dRenderer;import com.tPS.threeD.UiElement3D;class com.tPS.threeD.Stage3D implements iRenderable {	//props	private var lens:Lens;	private var center:Quaternion;	private var homeClip:MovieClip;	private var cast:Array;	private var renderer:Abstract3dRenderer;	function Stage3D($homeClip:MovieClip){		//Eventsource initialize		AsBroadcaster.initialize();		renderer = Abstract3dRenderer.initialize();		//setClip		homeClip = $homeClip;		trace("Stage: " + homeClip);		//drawHorizont();		//homeClip.cacheAsBitmap = true;		//homeClip.opaqueBackground = 0x000000;		init();	}	private function init(){		lens = new Lens();		center = new Quaternion(0,50,0,0);		cast = [];		trace("Stage 3D initialized");				var trgt = this;		homeClip.onEnterFrame = function(){			//trgt.render();		}	}		private function drawHorizont(){		homeClip.lineStyle(1,0xFFFFFF,50);		homeClip.moveTo(-Stage.width/2,0);		homeClip.lineTo(Stage.width/2,0);	}	public function addActor($actor:UiElement3D):Void{		cast.push($actor);	}		public function hideCast($hidden:Boolean):Void{		var i:Number = cast.length;		while(--i>-1){			cast[i]._visible = $hidden;		}	}		public function removeActors():Void{	 	for(var i=0; i<cast.length; i++){			cast[i].kill();		}		cast = [];	}	function render():Void{		renderer.render(this);	}		public function set _lens($lens:Lens):Void{		lens = $lens;	}	public function getCast(Void):Array{		return cast;	}	public function get _lens():Lens{		return lens;	}		public function get _stageMC():MovieClip{		return homeClip;	}}