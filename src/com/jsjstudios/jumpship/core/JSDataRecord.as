//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework// Copyright 2006 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework// File: JSDataRecord.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Imports////////////////////////////////////////////////////////////////////////////////// none////////////////////////////////////////////////////////////////////////////////////// Class: JSDataRecord/////////////////////////////////////////////////////////////////////////////////////*** Data Record Class.*/class com.jsjstudios.jumpship.core.JSDataRecord{	// 	// On Stage	//				// 	// Properties	//				// 	// Assets	//	private var dataRecord:Object		//	// Functions	//	public var addListener:Function;		// Used by AsBroadcaster	public var removeListener:Function;		// Used by AsBRoadcaster	public var broadcastMessage:Function;	// Used by AsBroadcaster to broadcast message	////////////////////////////////////////////////////////////////////////////	//	// Constructor	//	////////////////////////////////////////////////////////////////////////////	function JSDataRecord ( )	{				// Initialize AsBroadcaster to enable event broadcasting		AsBroadcaster.initialize(this);				dataRecord = new Object();			}		////////////////////////////////////////////////////////////////////////////	//	// Public Methods	//	////////////////////////////////////////////////////////////////////////////		/**	* Create this record item with the name-value pairs specified.	* @param theAttributes The name-value pairs for the record item. Takes the form 	* {name1:value1, name2:value2, ... }	*/	public function create(theAttributes:Object):Void {				for (var a in theAttributes) {						addNewAttribute(a);						if (theAttributes[a] == undefined) {							theAttributes[a] = {};							}						this[a+"Setter"](theAttributes[a]);					}			}	/**	* Updates this record item with the name-value pairs specified.	* @param theAttributes The name-value pairs for the record item. Takes the form 	* {name1:value1, name2:value2, ... }	*/	public function update(theAttributes:Object):Void {				for (var a in theAttributes) {						if (dataRecord[a] != undefined) {							this[a+"Setter"](theAttributes[a]);							}					}			}		/**	* Adds an attribute to this record.	* @param theName The name of the new attribute 	* @param theValue The value of the new attribute	*/	public function addAttribute(theName:String, theValue:Object):Void {				addNewAttribute ( theName );				if (theValue == undefined) {						theValue = {};						}					this[theName+"Setter"](theValue);			}		/**	* Adds an attribute from this record.	* @param theName The name of the attribute to be removed	*/	public function removeAttribute(theName:String):Void {				delete dataRecord[theName];		delete this[theName+"Getter"];		delete this[theName+"Setter"];			}		public function destroy():Void {				for (var a in dataRecord) {						removeAttribute(a);					}				dataRecord = {};			}		////////////////////////////////////////////////////////////////////////////	//	// Hook Methods	//	////////////////////////////////////////////////////////////////////////////		private function setFunction(theName:String) {this.broadcastMessage("dataRecordBindingEvent",this, theName)}		private function getFunction(theName:String) {}		////////////////////////////////////////////////////////////////////////////	//	// Private Methods	//	////////////////////////////////////////////////////////////////////////////			private function addNewAttribute ( attributeName:String )	{				this[attributeName+"Getter"] = function ():Object {						getFunction(attributeName);						return dataRecord[attributeName];					}				this[attributeName+"Setter"] = function (myValue):Void {						dataRecord[attributeName] = myValue;						setFunction(attributeName);					}				this.addProperty(attributeName, this[attributeName+"Getter"], this[attributeName+"Setter"]);			}	////////////////////////////////////////////////////////////////////////////	//	// Event Handlers	//	////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////	//	// Getter/Setters	//	////////////////////////////////////////////////////////////////////////////	/**	* (Read Only) Reference to the actual data object for this record item. This is 	* not the preferred way to access the data but can be used to access	* the data without triggering the getter/setter hook functions.	*/	public function get record():Object {				return dataRecord;			}		}	// Class End