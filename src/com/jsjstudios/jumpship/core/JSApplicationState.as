//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework// Copyright 2006 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework// File: JSApplicationState.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Imports//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Class: JSApplicationState///////////////////////////////////////////////////////////////////////////////////*** Application State Class. Singleton.*/class com.jsjstudios.jumpship.core.JSApplicationState{		//	// On Stage	//				//	// Properties	//	private var _pendingState:Object;	private var _currentState:Object;	private var _stateHistory:Array;			//	// Assets	//	private static var inst:JSApplicationState; 	// instance of self			//	// Intervals	//				//	// Constants	//	private var MAXHISTORY:Number = 100;		////////////////////////////////////////////////////////////////////////////////	//	// Constructor	//	////////////////////////////////////////////////////////////////////////////////	function JSApplicationState ()	{				_stateHistory = new Array();			}		////////////////////////////////////////////////////////////////////////////////	//	// Public Methods	//	////////////////////////////////////////////////////////////////////////////////		/**	* Singleton implementation for this class.	* @return A reference to this class instance.	*/	public static function getInstance ():JSApplicationState {		//		// Singleton Implementation		//				if ( inst == null )		{			// create a single instance of the singleton			inst = new JSApplicationState();					}				return inst;			}		/**	* Registers a new state.	* @param theState The new state.	*/	public function newState(theState:Object):Void {				_currentState = theState;				_stateHistory.splice(0,0,theState);				while (_stateHistory.length > MAXHISTORY) {						_stateHistory.pop();					}			}		/**	* Registers a new pending state. The pending state must be commited before	* it is logged.	* @param theState The new pending state.	* @param commitLast An optional Boolean parameter. If true than any previous	* pending state will be commited before the new pending state is registered.	* @see public function commitPendingState():Void	*/	public function newPendingState(theState:Object, commitLast:Boolean):Void {				if (commitLast == undefined) {			commitLast = false;		}				// Commit the last pending state unless told otherwise		if (_pendingState != undefined && commitLast != false) {			commitPendingState();		}				_pendingState = theState;			}		/**	* Commits a pending state.	*/	public function commitPendingState():Void {				if (_pendingState != undefined) {			_currentState = _pendingState;						_stateHistory.splice(0,0,_pendingState);						while (_stateHistory.length > MAXHISTORY) {								_stateHistory.pop();							}		}				clearPendingState();			}		/**	* Clears a pending state.	*/	public function clearPendingState():Void {				_pendingState = undefined;			}		/**	* Retuns the history of the Application state at a given index.	* @param theIndex The index of the state to return. Index 0 is the current state.	* @return The state history.	*/	public function getStateHistoryAt(theIndex:Number):Object {				return _stateHistory[theIndex];			}		/**	* Retuns the previous Application state.	* @return The state history.	*/	public function getLastState():Object {				return _stateHistory[1];			}		/**	* Reverts the Application state to a given history index. Defaulting to index 1, i.e. the	* last state.	* @param theIndex The optional index to revert to.	* @return The state history.	*/	public function revertState(theIndex:Number):Object {				if (theIndex == undefined) {						theIndex = 1;					}				for (var i = 0 ; i < theIndex; i++) {						_stateHistory.splice(0,1);						_currentState = _stateHistory[0];					}				return _currentState;			}					////////////////////////////////////////////////////////////////////////////////	//	// Private Functions	//	////////////////////////////////////////////////////////////////////////////////				////////////////////////////////////////////////////////////////////////////////	//	// Event Handlers	//	////////////////////////////////////////////////////////////////////////////////				////////////////////////////////////////////////////////////////////////////////	//	// Getters/Setters	//	////////////////////////////////////////////////////////////////////////////////		/**	* (Read Only) The current state of the Application	*/	public function get currentState():Object {		return _currentState;	}		/**	* (Read Only) The previous state of the Application	*/	public function get previousState():Object {		return _stateHistory[1];	}		/**	* (Read Only) The pending state of the Application	*/	public function get pendingState():Object {		return _pendingState;	}	}  // Class End