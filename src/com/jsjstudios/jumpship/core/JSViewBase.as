//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework// Copyright 2006 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework// File: JSViewBase.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Imports////////////////////////////////////////////////////////////////////////////////import com.jsjstudios.jumpship.core.JSDataModel;import com.jsjstudios.jumpship.core.JSControllerBase;//////////////////////////////////////////////////////////////////////////////////// Class: JSViewBase///////////////////////////////////////////////////////////////////////////////////*** View Base Class.* Takes one parameter in the constructor. new JSViewBase(theController).* theController is an optional reference to the controller of this view.*/class com.jsjstudios.jumpship.core.JSViewBase{		//	// On Stage	//				//	// Properties	//		private var _controller:JSControllerBase	//	// Assets	//	private var assets:Array;	private var assetStatus:Array;		//	// Intervals	//		//	// Functions	//	public var addListener:Function;		// Used by AsBroadcaster	public var removeListener:Function;		// Used by AsBRoadcaster	public var broadcastMessage:Function;	// Used by AsBroadcaster to broadcast message		//	// Constants	//			////////////////////////////////////////////////////////////////////////////////	//	// Constructor	//	////////////////////////////////////////////////////////////////////////////////		function JSViewBase (theController)	{				if (theController != undefined) {						_controller = theController;					}				assets = new Array();		assetStatus = new Array();		// Initialize AsBroadcaster to enable event broadcasting		AsBroadcaster.initialize(this);				//		init();				// add assets manually		// (hook operation)		addAssets();			}		////////////////////////////////////////////////////////////////////////////////	//	// Public Methods	//	////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////////////////////////////////////////////	//	// Concrete Methods	//	////////////////////////////////////////////////////////////////////////////		/**	* Tells an asset to load. If no asset name is provided, this method will load	* all assets associated with this View. This method calls the loadAsset()	* primative to cary out the task of loading.	* @param assetName An optional string with the asset name to be loaded.	*/	public function load(assetName:String) 	{				//		// Concrete method for telling this View to load it's assets.		// If a name is given, only that asset is loaded, otherwise		// all assets belonging to this view will be loaded.		//				if (assetName != undefined) {						loadAsset(assetName);					} else {						for (var a in assets) {								loadAsset(a);							}					}			}		/**	* Retuns a reference to the asset given by the name provided	* @param assetName A string with the asset name for the asset to be returned.	* @return A reference to the asset (if available) or "unavailable" if not available.	*/	public function getAssetRef(assetName:String) 	{				//		// Concrete method for returning a reference to any particular asset.		// Only assets which have an "available" status will be returned.		// If unavailable, an "unavailable" message is returned.		//				if ( assets [ assetName ] == undefined ) {			throw new Error ("ERROR The asset "+assetName+" has not been added to the View and cannot return a reference.");		} else {						if ( assetStatus [ assetName ] == "available") {								return assets [ assetName ];							} else {								trace("ATViewTemplate - There has been an attempt to get a reference to the asset "+assetName+" before this asset is available. 'unavailable' has been returned");				return "unavailable";							}					}			}		/**	* Makes an asset available to be accessed.	* @param assetName A string with the asset name for the asset to be returned.	* @throws Error if the asset name has not been registered.	* @see public function makeUnavailable ( assetName:String ) 	*/	public function makeAvailable ( assetName:String ) 	{				if ( assets [ assetName ] == undefined ) {			trace ("ERROR The asset "+assetName+" has not been added to the View and cannot be maid available.");		} else {			// Also save the status of this asset.			assetStatus [ assetName ] = "available";		}			}		/**	* Makes an asset unavailable for access.	* @param assetName A string with the asset name for the asset to be returned.	* @throws Error if the asset name has not been registered.	* @see public function makeAvailable ( assetName:String )	*/	public function makeUnavailable ( assetName:String ) 	{				if ( assets [ assetName ] == undefined ) {			trace ("ERROR The asset "+assetName+" has not been added to the View and cannot be maid unavailable.");		} else {						// Also save the status of this asset.			assetStatus [ assetName ] = "unavailable";		}			}		/**	* Registers a Model with this View. Multiple Models can be registered with multiple 	* calls to this method. This View will be registered as a listener to the registered	* Model to respond to data binding or other events.	* @param theModel A JSDataModel instance.	* @see public function unregisterModel(theModel:JSDataModel) 	*/	public function registerModel(theModel:JSDataModel) 	{				theModel.addListener(this);			}		/**	* Unregisters a Model with this View.	* @param theModel A JSDataModel instance.	* @see public function registerModel(theModel:JSDataModel)  	*/	public function unregisterModel(theModel:JSDataModel) 	{				theModel.removeListener(this);			}		////////////////////////////////////////////////////////////////////////////////	//	// Hook Functions	//	////////////////////////////////////////////////////////////////////////////////		private function init(){}		private function update(theModel:JSDataModel){}		////////////////////////////////////////////////////////////////////////////	//	// Concrete functions	//	////////////////////////////////////////////////////////////////////////////		// addAction() (Concrete)	private function addAsset ( assetName:String, assetRef:Object) 	{				if ( assets [ assetName ] != undefined ) {			trace ("ERROR The asset "+assetName+" has already been added to the View.");		} else {			// Save the Reference to this Asset in an array			assets [ assetName ] = assetRef;						// Also save the status of this asset. The starting status			// for any new asset is "unavailable" meaning this asset			// is not loaded and/or not initialized.			// The View should load it's assets and set the status to "available"			assetStatus [ assetName ] = "unavailable";		}			}		////////////////////////////////////////////////////////////////////////////	//	// Primitive functions (*must* be overriden)	//	////////////////////////////////////////////////////////////////////////////		// addAssets() - primitive operation for manual addition of actions	private function addAssets () 	{		//		// Note: View assets are added as references to the MC's on stage. 		// The View may either make reference to a MC already on stage		// or attach a movie in the process of adding it to the asset list		//		// The general format should be:		//		// addAsset( "myMC", myMC );		//		// or		//		// addAsset( "myMC", _root.attachMovie(id, "myMC", depth) );		//		// If there is no external load controller, this class should call the		// load() concrete method after all assets have been added it initialize		// them and make their status "available". The value of an external load		// controller is that the assets can be told to load in a way that effects		// the general site's load time the least		//				throw new Error ( 			"ERROR JSViewBase - addAsstes() primitive operation not implemented."			+ "\nAsstes not added to View" 		);	}		// loadAsset()	private function loadAsset(assetName:String)	{				//		// Note: This function should be used to load and/or initiate an asset.		// This function is called by the load(assetName:String) concrete method.		// After the asset is loaded, the makeAvalable() concrete function should		// be called (either by this class or by a listening class) so that this		// asset's status can be updated.		//				throw new Error ("ERROR JSViewBase - loadAsset(assetName:String) primitive operation not implemented.");			}		////////////////////////////////////////////////////////////////////////////////	//	// Event Handlers	//	////////////////////////////////////////////////////////////////////////////////		private function dataModelBindingEvent(theModel:JSDataModel, theParams:Object) 	{				// theParams take the form {id:theRecord.id , name:theName, value:theRecord.theName}				update(theModel);			}		////////////////////////////////////////////////////////////////////////////////	//	// Getters/Setters	//	////////////////////////////////////////////////////////////////////////////////		/**	* A Reference to the controller of this view.	*/	public function get controller():JSControllerBase 	{				return _controller;			}	public function set controller(theController:JSControllerBase):Void 	{				_controller = theController;		_controller.registerEventBroadcaster(this);			}	}  // Class End