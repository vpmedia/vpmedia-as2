//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework// Copyright 2006 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework Extras// File: JSMouseManager.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Imports////////////////////////////////////////////////////////////////////////////////import mx.events.EventDispatcher;//////////////////////////////////////////////////////////////////////////////////// Class: JSMouseManager///////////////////////////////////////////////////////////////////////////////////*** JumpShip Mouse Manager Class. This class fundamentally solves the problem of* what to do when you want a movieclip to respond to mouse clicks but you* also don't want to disable any buttons that the movieclip might contain.* Good examples of this are items that you might want to add dragging to.* This Singleton class listents for mouse events and will notify all MC's that* Are registered to it, which item(s) were clicked on. Objects that register* as listeners to this class can accept AsBroadcaster events or EventDispatcher * events.*/class com.jsjstudios.jumpship.extras.JSMouseManager{		//	// On Stage	//				//	// Properties	//	private var _currentState:String;		//	// Assets	//	private static var inst:JSMouseManager; 	// instance of self	private var targetList:Array;			//	// Intervals	//				//	// Constants	//		//	// Functions	//	/**	* This class issues the following events: mouseDownEvent(target:MovieClip or "none");	* mouseDownTopmostEvent(target:MovieClip); mouseUpEvent(target:MovieClip or "none");     	* mouseUpTopmostEvent(target:MovieClip);  	*/	public var addListener:Function;		// Used by AsBroadcaster	public var removeListener:Function;		// Used by AsBRoadcaster	public var broadcastMessage:Function;	// Used by AsBroadcaster to broadcast message		/**	* This class issues the following events: mouseDownEvent({type:"mouseDownEvent", target:JSMouseManager, params:MovieClip or "none"});     	* mouseDownTopmostEvent({type:"mouseDownTopmostEvent", target:JSMouseManager, params:MovieClip});     mouseUpEvent({type:"mouseUpEvent", target:JSMouseManager, params:MovieClip or "none"});     	* mouseUpTopmostEvent({type:"mouseUpTopmostEvent", target:JSMouseManager, params:MovieClip});  	*/	public var addEventListener:Function;		// Used by EventDispatcher	public var removeEventListener:Function;	// Used by EventDispatcher	public var dispatchEvent:Function;			// Used by EventDispatcher	public var dispatchQueue:Function;			// Used by EventDispatcher		////////////////////////////////////////////////////////////////////////////////	//	// Constructor	//	////////////////////////////////////////////////////////////////////////////////	function JSMouseManager ()	{				// Initialize AsBroadcaster to enable event broadcasting		AsBroadcaster.initialize(this);				// Initialize EventDispatcher to enable event dispatching		EventDispatcher.initialize(this);				targetList = new Array();				_currentState = "up"			}		////////////////////////////////////////////////////////////////////////////////	//	// Public Methods	//	////////////////////////////////////////////////////////////////////////////////		/**	* Singleton implementation for this class.	* @return A reference to this class instance.	*/	public static function getInstance ():JSMouseManager {		//		// Singleton Implementation		//				if ( inst == null )		{			// create a single instance of the singleton			inst = new JSMouseManager();			Mouse.addListener(inst);					}				return inst;			}		/**	* Registers a MovieClip which this class will be aware of as "clickable".	* @param theObject A reference to the MovieClip to add	*/	public function addTarget(theObject:MovieClip) {				targetList.push(theObject);			}		/**	* Removes a MovieClip as a target for this class.	* @param theObject A reference to the MovieClip to remove	*/	public function removeTarget(theObject:MovieClip) {				for (var i = 0; i < targetList.length; i++) {						if (targetList[i] == theObject) {								targetList.splice(i,1);							}					}			}					////////////////////////////////////////////////////////////////////////////////	//	// Private Functions	//	////////////////////////////////////////////////////////////////////////////////				////////////////////////////////////////////////////////////////////////////////	//	// Event Handlers	//	////////////////////////////////////////////////////////////////////////////////		private function onMouseDown() {				_currentState = "down";				var tempFlag:Boolean = false;		var tempIndex:Number = 0;				for (var i = 0; i < targetList.length; i++) {						if (targetList[i].hitTest(_root._xmouse,_root._ymouse,true)) {								if (tempFlag) {										// Check to see if the movie is on top and is visible					if (targetList[tempIndex].getDepth() < targetList[i].getDepth() && targetList[i]._visible != false) {												tempIndex = i;											}									} else {					tempFlag = true;					tempIndex = i;									}								// broadcast a message with a reference to the object the mouse is over				this.broadcastMessage("mouseDownEvent", targetList[i]);				this.dispatchEvent({type:"mouseDownEvent", target:this, params:targetList[i]});							}					}				// If the mouse is not over any registered objects...		if (!tempFlag) {						// broadcast a message with "none"			this.broadcastMessage("mouseDownEvent", "none");			this.dispatchEvent({type:"mouseDownEvent", target:this, params:"none"});					} else {						// broadcast a message with a reference to the topmost object the mouse is over			this.broadcastMessage("mouseDownTopmostEvent", targetList[tempIndex]);			this.dispatchEvent({type:"mouseDownTopmostEvent", target:this, params:targetList[tempIndex]});					}			}		private function onMouseUp() {				_currentState = "up";				var tempFlag:Boolean = false;		var tempIndex:Number = 0;				for (var i = 0; i < targetList.length; i++) {						if (targetList[i].hitTest(_root._xmouse,_root._ymouse,true)) {								if (tempFlag) {										// Check to see if the movie is on top and is visible					if (targetList[tempIndex].getDepth() < targetList[i].getDepth() && targetList[i]._visible != false) {												tempIndex = i;											}									} else {					tempFlag = true;					tempIndex = i;									}								//trace("JSMouseManager mouse down on "+targetList[i]);				// broadcast a message with a reference to the object the mouse is over				this.broadcastMessage("mouseUpEvent", targetList[i]);				this.dispatchEvent({type:"mouseUpEvent", target:this, params:targetList[i]});							}					}				// If the mouse is not over any registered objects...		if (!tempFlag) {						// broadcast a message with "none"			this.broadcastMessage("mouseUpEvent", "none");			this.dispatchEvent({type:"mouseUpEvent", target:this, params:"none"});					} else {						// broadcast a message with a reference to the topmost object the mouse is over			this.broadcastMessage("mouseUpTopmostEvent", targetList[tempIndex]);			this.dispatchEvent({type:"mouseUpTopmostEvent", target:this, params:targetList[tempIndex]});					}			}		private function onMouseMove() {				if (_currentState == "down") {						this.broadcastMessage("mouseDraggingEvent");			this.dispatchEvent({type:"mouseDraggingEvent", target:this});					}			}		private function onMouseWheel() {			}		////////////////////////////////////////////////////////////////////////////////	//	// Getters/Setters	//	////////////////////////////////////////////////////////////////////////////////		/**	* (Read Only) The current state of the Manager. The states are "up" and "down".	*/	public function get currentState():String {		return _currentState;	}	}  // Class End