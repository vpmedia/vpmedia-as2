//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework// Copyright 2006 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework Extras// File: JSSerialGenerator.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Imports//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Class: JSSerialGenerator///////////////////////////////////////////////////////////////////////////////////** * JumpShip Serial Generator Class. This Class generates a unique id consisting* of seven random upper and lowercase letters and a timestanp representing the* number of miliseconds that have past from Jan 1, 1970 until the current time.* This class will also keep track of issued serial id's (up to 10000)*/class com.jsjstudios.jumpship.extras.JSSerialGenerator{		//	// On Stage	//			//	// Properties	//	private static var inst:JSSerialGenerator;		// instance of the singleton		//	// Assets	//	private var serialLog:Array;	private var serialCount:Number;		//	// Intervals	//				//	// Constants	//	private var LETTERS:Array = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];		private var MAXSERIALCOUNT:Number = 10000;		////////////////////////////////////////////////////////////////////////////////	//	// Constructor	//	////////////////////////////////////////////////////////////////////////////////	function JSSerialGenerator ()	{				serialLog = new Array();		serialCount = 0;			}		////////////////////////////////////////////////////////////////////////////////	//	// Public Methods	//	////////////////////////////////////////////////////////////////////////////////		/**	* Singleton implementation for this class.	* @return A reference to this class instance.	*/	public static function getInstance ()	{		//		// Return reference to singleton instance		//		if ( inst == null )		{			// create a single instance of the singleton			inst = new JSSerialGenerator();			return inst;		}		else		{			// instance already exists, return a reference to it			return inst;		}	}		/**	* Returns a new serial id.	* @param an optional id string by which this serial can be retrieved later.	* @return A sesrial id string.	*/	public function newSerial(theID:String):String{				serialCount++;				if (serialCount > MAXSERIALCOUNT) {						serialCount = 0;					}				while (serialLog.length > MAXSERIALCOUNT) {						serialLog.splice(0,1);					}				if (theID == undefined) {						theID = String(serialCount);					}				// Time Stamp		var tempDate:Date = new Date();		var idNum:Number = Date.UTC(tempDate.getFullYear(),tempDate.getMonth(), tempDate.getDate(), tempDate.getHours(), tempDate.getMinutes(), tempDate.getSeconds(), tempDate.getMilliseconds());		var myID:String = String(idNum);				var randomString:String = "";				// 6 digit random string		for (var i = 0; i < 7; i++) {						var randomIndex = Math.round(Math.random()*51);			randomString += LETTERS[randomIndex];					}				serialLog[theID] = String(randomString+myID);							return String(randomString+myID);			}		/**	* Returns a serial id issued in the past according to it's id.	* @param theID An id string of the serial.	* @return A sesrial id string.	*/	public function retrieveSerial(theID:String):String {				return serialLog[theID];			}		////////////////////////////////////////////////////////////////////////////////	//	// Private Functions	//	////////////////////////////////////////////////////////////////////////////////				////////////////////////////////////////////////////////////////////////////////	//	// Event Handlers	//	////////////////////////////////////////////////////////////////////////////////			////////////////////////////////////////////////////////////////////////////////	//	// Getters/Setters	//	////////////////////////////////////////////////////////////////////////////////	}  // Class End