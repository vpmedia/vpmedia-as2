/** * Dump arbitrary actionscript object as string. *  * Copyright 2006 RocketBoots Pty Ltd *  * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * 	 * 	http://www.apache.org/licenses/LICENSE-2.0 * 	 * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *  *  * Modified by David Knape on 2006-1-21 to add coloring and some extra options. */ class com.bumpslide.util.Dump {	// OPTIONS	// Do not show more than this many keys of an object	public static var SNIP_OBJECT_KEYS_LENGTH		= 30;			// Do not show more than this many elements of an array	public static var SNIP_ARRAY_ELEMENTS_LENGTH	= 30;		// Do not expand keys beginning with "_"	public static var SNIP_UNDERSCORE_KEYS			= true;		public static var MAX_RECURSION_DEPTH           = 4;	public static var HTML_ENABLED                  = false;	public static var HIDE_FUNCTIONS                = true;	public static var HIDE_SNIPPED                  = true;			// Blacklisted props (useful with flex ui components)	// Do not expand keys that match any of the keys in this Object	public static var SNIP_EXACT_KEYS = { 		inheritingStyles:"", 		nonInheritingStyles:"", 		nonInheritingStyleSheet:"", 		skinName:"", 				tfList:"", 		text:'', 		initText:'', 		htmlText:'',		border_mc:"", 		stylecache:"", 		components:"", 		floatingBorder_mc:""	};  	private static var indent : String = "";			static function get CURLY_OPEN  () { return colr('{ ', '#880000'); }	static function get CURLY_CLOSE () { return colr('}', '#880000'); }	static function get BRAC_OPEN   () { return colr('[ ', '#880000'); }	static function get BRAC_CLOSE  () { return colr(']', '#880000'); }	static function get LS () { 		return HTML_ENABLED ? '<br>' : "\n"; 	}	static function get INDENT_STRING () { 		return HTML_ENABLED ? ' &nbsp; &nbsp;' : '    '; 	}	static function get SNIP_DEEP_RECURSION_LENGTH () {		return String(INDENT_STRING).length * (MAX_RECURSION_DEPTH-1);	}	static function colr(str, col) { return HTML_ENABLED ? ('<font color="'+col+'">'+str+'</font>') : str; }	static function commnt(str) { return colr("/* "+str+"*/", '#226622'); }	static function fakeObj(str) { return CURLY_OPEN + commnt( str ) + CURLY_CLOSE; }		static function str(str) { 	return colr('"'+str.split('"').join('\"')+'"', '#004499'); }	static function string(x) {		var previouslyEnabled = HTML_ENABLED;		HTML_ENABLED = false;		var retVal = _dump(x);		HTML_ENABLED = previouslyEnabled;		return retVal;			}		static function html(x) {		var previouslyEnabled = HTML_ENABLED;		HTML_ENABLED = true;		var retVal = _dump(x);		HTML_ENABLED = previouslyEnabled;		return retVal;			}		static function trace(x) {		trace( Dump.string( x ) );	}			static function _dump(x) : String {		var s : String = "";		var oldIndent : String;		var i : Number;		var keyCount : Number;		var key : String;		var testObj : Object;		var testResult : String;		if (indent.length > SNIP_DEEP_RECURSION_LENGTH) return fakeObj('deep recursion');		oldIndent = indent;		indent += INDENT_STRING;		if (x instanceof Array) {			if (x.length == 0) {				s += BRAC_OPEN+BRAC_CLOSE ;			} else {				s += BRAC_OPEN;				for (i = 0; i < x.length && i < SNIP_ARRAY_ELEMENTS_LENGTH; i++) {					if(!HIDE_FUNCTIONS || typeof(x[key]) != 'function') 					    s += LS + indent + /*i + ": " +*/ _dump(x[i]) + ( i<x.length-1 ? ' ,' : '');				}				if (SNIP_ARRAY_ELEMENTS_LENGTH < x.length)					s += indent + fakeObj("snipped remaining " + (x.length - SNIP_ARRAY_ELEMENTS_LENGTH) + " elements");				s += LS + oldIndent + BRAC_CLOSE;			}		} else if (x instanceof Function) {			s = "function () "+fakeObj('');		} else if (x instanceof Date) {			s = x.getFullYear() + "/" + (x.getMonth() + 1) + "/" + x.getDate() + " " + x.getHours() + ":" + x.getMinutes();		} else if (x instanceof Object || typeof(x) == 'object') {			keyCount = 0;						for (key in x) {keyCount++;};						if (keyCount == 0) {				s += CURLY_OPEN+CURLY_CLOSE;							} else {				if (x._dumped != undefined) {					s += fakeObj( 'circular reference' );				} else {					i = 0;					x._dumped = true;					s += CURLY_OPEN;					for (key in x) {						if (key != "_dumped") {							var needComma = false;							if (SNIP_UNDERSCORE_KEYS && key.substr(0, 1) == "_" && !HIDE_SNIPPED) {								s += LS + indent + key + ": "+fakeObj('underscore key');								needComma = true;							} else if (SNIP_EXACT_KEYS[key] != undefined  && !HIDE_SNIPPED) {								s += LS + indent + key + ": "+fakeObj('blacklisted key');																needComma = true;							} else {								if(!HIDE_FUNCTIONS || typeof(x[key]) != 'function') {								    s += LS + indent + key + ": " + _dump(x[key]);									needComma = true								}							}							if(needComma && i<keyCount-1) s += ' ,';							i++;							if (i >= SNIP_OBJECT_KEYS_LENGTH) {								s += LS + indent + fakeObj("snipped remaining " + (keyCount - SNIP_OBJECT_KEYS_LENGTH));								break;							}						}					}					s += LS + oldIndent + CURLY_CLOSE;						delete x._dumped;				}			}		} else if (typeof(x) == "number" || typeof(x) == "boolean") {			s = colr( x.toString(), '#996600' );			} else if (typeof(x) == "string") {			s = str(x.toString());		} else if (x == undefined) {			s = colr('undefined', '#666666');						/*			// Some remoting and casting issues can cause an object to appear undefined when it's not			testObj = new Object();			for (key in x) testObj[key] = x[key];			testResult =dump(testObj);			if (testResult.substr(0, 2) == "{}" || testResult.substr(0, String(CURLY_OPEN + COMMENT_OPEN).length) == CURLY_OPEN + COMMENT_OPEN)				s = "undefined";			else				s = dump(testObj);								//"(undefined but appears to contain following keys (typecast or remoting registerClass issue?))" + LS + testResult;				*/					} else {			s = fakeObj('unknown');		}		indent = oldIndent;		return s;	}			}