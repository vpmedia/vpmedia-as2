import com.rootylicious.utils.Delegate;class com.rootylicious.ui.Scroller {	private var SCROLLER_MC:MovieClip;	private var MC_TO_SCROLL:MovieClip;	private var SCROLL_RECT:MovieClip;	private var ind:Number;	private var wheel_ind:Number;	private var scr_int;	private var diff:Number;	private var mouseListener:Object = new Object();	private var track_size:Number;	private var sc_difference:Number;	private var currEase:Number;	private var _originalMousePosition:Number;	private var _originalBarPosition:Number;	public function Scroller(scroller_mc:MovieClip, mc_to_scroll:MovieClip, scroll_rect:MovieClip, tr_size:Number, w:Number, d:Number) {		SCROLLER_MC = scroller_mc;		MC_TO_SCROLL = mc_to_scroll;		SCROLL_RECT = scroll_rect;		track_size = tr_size;		trace(w);		SCROLLER_MC._width = w;		sc_difference = d;		currEase = 8;		init();	}	private function init() {		SCROLLER_MC.upperBtn.useHandCursor = false;		SCROLLER_MC.lowerBtn.useHandCursor = false;		SCROLLER_MC.scrollTab.useHandCursor = false;		SCROLLER_MC._visible = true;		updateScroller(SCROLL_RECT,track_size);		SCROLLER_MC.upperBtn.onPress = Delegate.create(this, upBtnPress);		SCROLLER_MC.upperBtn.onRollOver = Delegate.create(this, roll, SCROLLER_MC.upperBtn);		SCROLLER_MC.upperBtn.onRollOut = Delegate.create(this, rollOut, SCROLLER_MC.upperBtn);		SCROLLER_MC.upperBtn.onDragOut = Delegate.create(this, rollOut, SCROLLER_MC.upperBtn);		SCROLLER_MC.upperBtn.onRelease = Delegate.create(this, removeInterval);		SCROLLER_MC.upperBtn.onReleaseOutside = Delegate.create(this, removeInterval);		SCROLLER_MC.lowerBtn.onPress = Delegate.create(this, lowBtnPress);		SCROLLER_MC.lowerBtn.onRollOver = Delegate.create(this, roll, SCROLLER_MC.lowerBtn);		SCROLLER_MC.lowerBtn.onRollOut = Delegate.create(this, rollOut, SCROLLER_MC.lowerBtn);		SCROLLER_MC.lowerBtn.onDragOut = Delegate.create(this, rollOut, SCROLLER_MC.lowerBtn);		SCROLLER_MC.lowerBtn.onRelease = Delegate.create(this, removeInterval);		SCROLLER_MC.lowerBtn.onReleaseOutside = Delegate.create(this, removeInterval);		SCROLLER_MC.scrollTab.onPress = Delegate.create(this, tabPress);		//SCROLLER_MC.scrollTab.onRollOver = Delegate.create(this, roll, SCROLLER_MC.scrollTab);		//SCROLLER_MC.scrollTab.onRollOut = Delegate.create(this, rollOut, SCROLLER_MC.scrollTab);		//SCROLLER_MC.scrollTab.onDragOut = Delegate.create(this, rollOut, SCROLLER_MC.scrollTab);		SCROLLER_MC.scrollTab.onRelease = Delegate.create(this, tabRelease);		SCROLLER_MC.scrollTab.onReleaseOutside = Delegate.create(this, tabRelease);		//SCROLLER_MC.scrollTab.onEnterFrame = Delegate.create(this, entFrame);		setInterval(this,"entFrame",15);		mouseListener.onMouseWheel = Delegate.create(this, mouseScroll);		Mouse.addListener(mouseListener);	}	public function set ease(e:Number):Void {		currEase = e;	}	public function get ease():Number {		return currEase;	}	private function mouseScroll(delta:Number) {		if (delta<0) {			pressScroll("pos",wheel_ind);		} else {			pressScroll("neg",wheel_ind);		}	}	private function removeInterval() {		clearInterval(scr_int);	}	private function roll(mc:MovieClip) {		mc.gotoAndPlay("in");	}	private function rollOut(mc:MovieClip) {		mc.gotoAndPlay("out");	}	private function upBtnPress() {		pressScroll("neg",ind);		scr_int = setInterval(this, "pressScroll", 100, "neg", ind);	}	private function lowBtnPress() {		pressScroll("pos",ind);		scr_int = setInterval(this, "pressScroll", 100, "pos", ind);	}	private function tabPress() {		SCROLLER_MC.scrollTab.gotoAndPlay("in");		SCROLLER_MC.scrollTab.pressed = true;		initBarDrag();		//SCROLLER_MC.scrollTab.startDrag(false,0,0,0,track_size-SCROLLER_MC.scrollTab._height);		SCROLLER_MC.cacheAsBitmap = true;		MC_TO_SCROLL.cacheAsBitmap = true;	}	private function tabRelease() {		SCROLLER_MC.scrollTab.gotoAndPlay("out");		SCROLLER_MC.scrollTab.pressed = false;		//SCROLLER_MC.scrollTab.stopDrag();		SCROLLER_MC.scrollTab._y = Math.round(SCROLLER_MC.scrollTab._y);		SCROLLER_MC.cacheAsBitmap = false;		MC_TO_SCROLL.cacheAsBitmap = false;	}	private function entFrame() {		if(SCROLLER_MC.scrollTab.pressed){						SCROLLER_MC.scrollTab._y = SCROLLER_MC._ymouse - _originalMousePosition + _originalBarPosition;			checkBounds();		}		diff = (track_size-SCROLLER_MC.scrollTab._height)/(MC_TO_SCROLL._height-sc_difference-track_size);		if (MC_TO_SCROLL._height<sc_difference+track_size) {			SCROLLER_MC.scrollTab._y = 0;			SCROLLER_MC._visible = false;		} else {			SCROLLER_MC._visible = true;			MC_TO_SCROLL._y += Math.floor((-Math.ceil(SCROLLER_MC.scrollTab._y/diff)-MC_TO_SCROLL._y)/currEase);			if (SCROLLER_MC.scrollTab._y>0 && SCROLLER_MC.scrollTab._y<track_size-SCROLLER_MC.scrollTab._height) {				MC_TO_SCROLL._y += Math.round((-Math.ceil(SCROLLER_MC.scrollTab._y/diff)-MC_TO_SCROLL._y)/currEase);			} else if (SCROLLER_MC.scrollTab._y<=0) {				MC_TO_SCROLL._y += Math.ceil((0-MC_TO_SCROLL._y)/currEase);			} else if (SCROLLER_MC.scrollTab._y>=track_size-SCROLLER_MC.scrollTab._height) {				MC_TO_SCROLL._y += Math.floor((-Math.ceil((track_size-SCROLLER_MC.scrollTab._height)/diff)-MC_TO_SCROLL._y)/currEase);			}			SCROLLER_MC.upperBtn._height = SCROLLER_MC.scrollTab._y;			SCROLLER_MC.lowerBtn._height = SCROLLER_MC.scrollTrack._height-(SCROLLER_MC.scrollTab._y+SCROLLER_MC.scrollTab._height);			SCROLLER_MC.lowerBtn._y = SCROLLER_MC.scrollTab._y+SCROLLER_MC.scrollTab._height;		}		updateAfterEvent();	}	public function updateScroller(scroll_rect:MovieClip, tr_size:Number) {		MC_TO_SCROLL._parent.scrollRect = scroll_rect;		wheel_ind = Math.round(tr_size/20);		ind = Math.round(tr_size/5);		SCROLLER_MC.scrollTab._height = ind;		SCROLLER_MC.scrollTrack._height = tr_size;		if (SCROLLER_MC.scrollTab._y>tr_size-SCROLLER_MC.scrollTab._height) {			SCROLLER_MC.scrollTab._y = tr_size-SCROLLER_MC.scrollTab._height;		}		this.track_size = tr_size;	}	private function checkBounds() {		if (SCROLLER_MC.scrollTab._y>track_size-SCROLLER_MC.scrollTab._height) {			SCROLLER_MC.scrollTab._y = track_size-SCROLLER_MC.scrollTab._height;		}		if (SCROLLER_MC.scrollTab._y<0) {			SCROLLER_MC.scrollTab._y = 0;		}	}	private function initBarDrag() {		if (SCROLLER_MC._ymouse<SCROLLER_MC.scrollTab._y) {			SCROLLER_MC.scrollTab._y = SCROLLER_MC._ymouse;		}		if (SCROLLER_MC._ymouse>SCROLLER_MC.scrollTab._y+SCROLLER_MC.scrollTab._height) {			SCROLLER_MC.scrollTab._y = SCROLLER_MC._ymouse-SCROLLER_MC.scrollTab._height;		}		_originalMousePosition = SCROLLER_MC._ymouse;		_originalBarPosition = SCROLLER_MC.scrollTab._y;	}	private function pressScroll(targ:String, amnt:Number) {		if (targ == "neg") {			if (SCROLLER_MC.scrollTab._y>=amnt) {				SCROLLER_MC.scrollTab._y -= amnt;			} else {				SCROLLER_MC.scrollTab._y = 0;			}		} else {			if (SCROLLER_MC.scrollTab._y<=track_size-SCROLLER_MC.scrollTab._height-amnt) {				SCROLLER_MC.scrollTab._y += amnt;			} else {				SCROLLER_MC.scrollTab._y = track_size-SCROLLER_MC.scrollTab._height;			}		}	}}