/**
* Class: Error
*
* Version: v1.0b
* Released: 03 April, 2006
*
* Error handling and reporting methods. This is a static class and cannot be instantiated.
*
* The latest version can be found at:
* http://sourceforge.net/projects/bnm-fc
* -or-
* http://www.baynewmedia.com/
*
* (C)opyright 2006 Bay New Media.
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library (see "lgpl.txt") ; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*
*	Class/Asset Dependencies
* 		Extends: None
*		Requires: com.bnm.fc.Extension
*		Required By: All classes
*		Required Data Sources: None
*		Required Assets:
*			None
*
*
* History:
*
* v1.0 [04/03/06]
* 	- first public version
*
*/
import com.bnm.fc.Extension;
class com.bnm.fc.Error {

	// _codeListeners (array, static) - An array containing all listeners assigned to error codes.
	public static var _codeListeners:Array=new Array();
	// _senderListeners (array, static) - An array containing all listeners assigned to specific senders.
	public static var _senderListeners:Array=new Array();

	// __/ PUBLIC METHODS \__

	/**
	 * Method: broadcast
	 *
	 * Throws an error by broadcasting it to all listeners.
	 *
	 * Parameters:
	 * 	errorObj (object, required) - Object containing error specifications. Object properties may be expanded
	 * 			in the future but will never be rolled back in order to maintain compatibility. Listeners should never
	 * 			assume the presence or correct typing of any error object.
	 *
	 * 			Properties include:
	 * 				code (number) - Numeric error code. Listeners bound to numeric codes will receive the appropriate broadcast.
	 * 				sender (reference) - A reference to the sending class, object, or movie clip. Listeners bound to specific senders
	 * 							will receive the appropriate broadcast.
	 * 				msg (string) - A brief (one line) descriptive string describing the error condition, typically for the benefit of the user or developer. See
	 * 							the Preferred Message Format section below for preferred formatting for this parameter.
	 * 				msgLong (string) - A long descripting  string describing the error condition. this should not duplicate the 'msg' property but
	 * 							should describe the condition in greater detail. This is usually used to present remedies to the user.
	 * 				onThrow (function reference) - A callback function to invoke once the message has been broadcast.
	 * 				context (object reference) - The callback context (scope) in which to invoke the 'onThrow' method.
	 *
	 * Returns:
	 *
	 * 	boolean - TRUE if at least one listener caught the message, FALSE otherwise. If no listeners are defined for the error, you
	 * 				may wish to take alternate steps to deal with error notification.
	 *
	 * ---
	 *
	 *	Preferred Message Format
	 *
	 * 	While a developer is free to use any error format they wish, the following 'msg' format (short error message) is preferred for consistency
	 * 	and to help identify the source of errors:
	 *
	 * 	"ClassName.methodName : Brief error description"
	 *
	 * 	For example, if the error was generated by method 'addUser' in the class 'UserAdmin', the error would look something like this:
	 *
	 * 	"UserAdmin.addUser : Capital letter should be used for first and last name."
	 *
	 * Valid error codes:
	 * 	1 - Invalid reference type : A reference to a movie clip, object, class instance, etc.  is invalid. The reference is of the wrong type.
	 * 	2 - Invalid reference : A reference to a movie clip, object, class instance, etc.  is invalid. The reference is undefined.
	 * 	3 - Invalid reference member(s) : One or more members within the reference are not what they are expected to be. They
	 * 				may either be mistyped or undefined.
	 * 	4 - Invalid reference size : The reference is of the wrong size (a specific byte size is expected).
	 * 	5 - Invalid reference format : The reference contains one or more values that are incorrectly formatted.
	 * 	6 - Load timeout error : A load has timed out.
	 * 	7 - Load HTTP error : A specific HTTP error was returned from the server for a load.
	 * 	8 - Load parse error : A load has completed but could not be parsed correctly. This applies to any serialized object such as XML
	 * 			or LoadVars.
	 *
	 * Notes:
	 *
	 * 	These codes may be extended as desired in custom implementations. However, be aware that such extensions are not
	 * 	officially supported.
	 */
	public static function broadcast (errorObj:Object):Boolean {
		trace ('Error ('+errorObj.code+'): '+errorObj.msg);
		trace (errorObj.msgLong);
		trace(' ');
		broadcastErrorCode(errorObj);
		return (true);
	}//broadcast

	/**
	 * Method: set codeListener
	 *
	 * Adds an error code listener to the listener stack. A listening function may expect to receive an object
	 * with the contents of the error. For the contents of this object refer to the <broadcast> method.
	 *
	 * Parameter:
	 * 	listenerObj (object, required) - An object containing parameters pertaining to the listener:
	 * 		These include:
	 * 			func (function reference, required) - The listening function to invoke on the error code.
	 * 			context (object reference, optional) - The context or scope in which to invoke the listener.
	 * 			code (number, required) - The error code to listen to (see error codes for <broadcast> method.
	 *
	*
	 * Notes:
	 *
	 * 	Error code checking is not performed so it is possible to assign listeners to codes that are not
	 * 	officially supported. Error handling in such situations is up to the developer(s) own implementation.
	 */

	public static function set codeListener(listenerObj:Object) {
		if ((listenerObj.func==undefined) || (Extension.xtypeof(listenerObj.func)<>'function')) {return;}
		if ((listenerObj.code==undefined) || (Extension.xtypeof(listenerObj.code)<>'number')) {return;}
		if (_codeListeners[listenerObj.code]==undefined) {
			_codeListeners[listenerObj.code]=new Array();
		}//if
		_codeListeners[listenerObj.code].push(listenerObj);
	}// set codeListener

	// __/ PRIVATE METHODS \__

	/**
	 * Method: broadcastErrorCode
	 *
	 * Broadcasts an error to all listeners listening for a specific error code.
	 *
	 * Parameters:
	 * 	errorObj (object, required) - An object containing the error parameters. These parameters will usually
	 * 		mirror those used in the <broadcast> method. One parameter, however, is required:
	 * 			code (number, required) - The numeric error code.
	 *
	 * Returns:
	 * 	Nothing
	 *
	 * See also:
	 * 	<broadcast>
	 */
	private static function broadcastErrorCode(errorObj:Object) {
		for (var count:Number=0; count<_codeListeners[errorObj.code].length;count++) {
			var listener:Object=_codeListeners[errorObj.code][count];
			if (listener.context==undefined) {
				listener.func(errorObj);
			} else {
				listener.func.call(listener.context, errorObj);
			}//else
		}//for
	}// broadcastErrorCode


}//Error class