/*** gOOifier by Grant Skinner. October 1, 2005* Visit www.gskinner.com/blog for documentation, updates and more free code.** You may distribute and/or modify this class, however this comment block must remain intact, and it must remain in the com.gskinner package.* You may not use this source code in commercial projects without prior permission from Grant Skinner (info@gskinner.com)** Attribution (credit) in non-commercial projects is appreciated, with a link back to www.gskinner.com/blog*/import flash.display.BitmapData;import flash.geom.Matrix;import flash.geom.Rectangle;import flash.filters.DisplacementMapFilter;import flash.geom.Point;import flash.geom.ColorTransform;import flash.filters.BlurFilter;// ** AUTO-UI IMPORT STATEMENTS **// ** END AUTO-UI IMPORT STATEMENTS **class com.gskinner.gooifier.Main extends MovieClip {// Constants:	public static var CLASS_REF = com.gskinner.gooifier.Main;	public static var LINKAGE_ID:String = "com.gskinner.gooifier.Main";// Public Properties:// Private Properties:	private var rect:Rectangle;	private var mapBmp:BitmapData;	private var blurredMapBmp:BitmapData;	private var blurF:BlurFilter;	private var pt:Point;	private var dispMapF:DisplacementMapFilter;	// holder for transient values (ex. during drag, animation)	private var tmp:Object;	// UI Elements:	private var mapHolder:MovieClip;// ** AUTO-UI ELEMENTS **	private var img:MovieClip;	private var brush:MovieClip;// ** END AUTO-UI ELEMENTS **// Initialization:	private function Main() {		// set up geom:		rect = new Rectangle(0,0,Math.floor(img._width),Math.floor(img._height));		pt = new Point(0,0);				// set up bitmaps:		mapBmp = new BitmapData(rect.width,rect.height,false,0x808080);		blurredMapBmp = mapBmp.clone();				// set up filters:		blurF = new BlurFilter(8,8,2);		dispMapF = new DisplacementMapFilter(blurredMapBmp,pt,2,4,100,100,"clamp");	}	private function onLoad():Void { configUI(); }// Public Methods:// Semi-Private Methods:// Private Methods:	private function configUI():Void {		brush._visible = false;		onMouseDown = startGoo;	}		private function startGoo():Void {		tmp = {oldx:_xmouse,oldy:_ymouse};		onMouseUp = endGoo;		onMouseMove = gooify;	}		private function endGoo():Void {		delete(tmp);		delete(onMouseUp);		delete(onMouseMove);	}		private function clearGoo():Void {		// fill the displacement map with 50% grey (neutral displacement)		mapBmp.fillRect(rect,0x808080);		blurredMapBmp.fillRect(rect,0x808080);		applyMap();	}		private function gooify():Void {		// find the mouse movement:		var dx:Number = _xmouse-tmp.oldx;		var dy:Number = _ymouse-tmp.oldy;		tmp = {oldx:_xmouse,oldy:_ymouse};				// position the mouse and rotate according to direction of motion:		brush._rotation = (Math.atan2(dy,dx))*180/Math.PI;		brush._x = _xmouse;		brush._y = _ymouse;				// set up a color transform to color the brush according to direction of motion:		var g:Number = 0x80+Math.min(0x79,Math.max(-0x80,  -dx*2  ));		var b:Number = 0x80+Math.min(0x79,Math.max(-0x80,  -dy*2  ));		var ct:ColorTransform = new ColorTransform(0,0,0,1,0x80,g,b,0);				// draw the brush onto the displacement map:		mapBmp.draw(brush,brush.transform.matrix,ct,"hardlight");				applyMap();	}	private function applyMap() {		// blur the displacement map to make the results more smooth:		blurredMapBmp.applyFilter(mapBmp,rect,pt,blurF);		// do displacement:		img.filters = [dispMapF];	}		private function animateGoo():Void {		onEnterFrame = animate;		onPress = endAnimate;		delete(onMouseDown);		tmp = {count:100,dir:-4,scale:dispMapF.scaleX}	}		private function animate():Void {		// to animate, just change the displacement map filter's scale values over time:		tmp.count+=tmp.dir;		if (tmp.count >= 100 || tmp.count <= 0) { tmp.dir *= -1; }		dispMapF.scaleX = dispMapF.scaleY = tmp.count/100*tmp.scale;		applyMap();	}		private function endAnimate():Void {		delete(onEnterFrame);		delete(onPress);		dispMapF.scaleX = dispMapF.scaleY = tmp.scale;		onMouseDown = startGoo;		delete(tmp);		applyMap();	}		// debugging:	private function showMap():Void {		mapHolder = createEmptyMovieClip("mapHolder",2);		mapHolder.attachBitmap(mapBmp,2);		onPress = hideMap;	}		private function hideMap():Void {		mapHolder.removeMovieClip();		delete(onPress);	}}