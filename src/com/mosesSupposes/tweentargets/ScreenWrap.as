import com.mosesSupposes.fuse.ZigoEngine;

/**
 * FuseFX utility
 * Copyright (c) 2007 Moses Gunesch, MosesSupposes.com
 * @ignore
 * 
 * ScreenWrap: adds Atari-style screen-wrapping to MovieClip movement. 
 * 
 * @usage
 * There are three general approaches to extending the ZigoEngine. The most basic is subclassing 
 * as shown in the SoundPlus example. FuseFX provides the option to define surrogate tween properties. 
 * However, neither of those solutions is the right choice for ScreenWrap, because we want to take 
 * advantage of the engine's built-in bezier-tween functionality, which works directly with a target's 
 * _x and _y properties.
 * <br><br>
 * This class shows a third approach: creating a surrogate target that wraps the actual target with 
 * tweenable _x and _y properties. 
 * 
 * <pre>ZigoEngine.doTween(new ScreenWrap(logo_mc), '_x,_y', ['2000', '1000'], 3, 'easeInOutExpo');</pre>
 * 
 * ZigoEngine operates on the ScreenWrap instance instead of the real target MovieClip. 
 * <br><br>
 * One disadvantage to creating extensions in this fashion is that property-conflicts are not 
 * automated and so they have to be handled manually, see {@link #onTweenAdd} for more on this. 
 */
 class com.mosesSupposes.tweentargets.ScreenWrap {

	private var _target : Object;
	
	private var _xOffset : Number;

	private var _yOffset : Number;
	
	private var addListener : Function;

	public function ScreenWrap(target:Object)
	{
		_target = target;
		ZigoEngine.addListener(this); // for onTweenAdd event handler
	}
	
	/**
	 * Listen for when _x, _y, or _bezier_ tweens are added to the engine 
	 * to reset internal tracking variables and avoid conflicts.
	 * 
	 * @usage Note that this code only handles conflicts between the real target and 
	 * the extension instance. Internal conflicts between bezier and _x/_y tweens are 
	 * already automated in the engine. This might not always be the case when writing 
	 * such an extension, so carefully consider whether other conflicting properties should 
	 * be stripped from both the real target and the extensio instance using removeTween.
	 * 
	 * @param targets	An array of tween targets
	 * @param props		An array of property strings generated by the <code>ZManager.paramsObj</code> method.
	 * 					<br>Note: _scale and _size are split into movieclip properties and duplicate properties 
	 * 					are stripped, with the exception of overlapping _fade / _alpha and overlapping color-transform tweens.
	 */
	private function onTweenAdd(targets:Array, props:Array):Void {
		for (var i:String in targets) {
			if (targets[i]==this) {
				for (var j:String in props) {
					if (props[j]=='_bezier_') {
						this._xOffset = 0;
						this._yOffset = 0;
						ZigoEngine.removeTween(_target, '_x,_y');
					}
					else {
						if (props[j]=='_x') {
							this._xOffset = 0;
							ZigoEngine.removeTween(_target, '_x');
						}
						if (props[j]=='_y') {
							this._yOffset = 0;
							ZigoEngine.removeTween(_target, '_y');
						}
					}
				}
			}
			else if (targets[i]==_target) {
				// if the user tweens the actual target's _x or _y, remove 
				// any conflicting tweens running in this extension instance.
				for (var j:String in props) {
					if (props[j]=='_bezier_') {
						ZigoEngine.removeTween(this, '_x,_y');
					}
					else {
						if (props[j]=='_x') {
							ZigoEngine.removeTween(this, '_x');
						}
						if (props[j]=='_y') {
							ZigoEngine.removeTween(this, '_y');
						}
					}
				}
			}
		}
	}
	
	function get _x():Number {
		return _target._x;
	}
	
	function set _x(v:Number) {
		var gb:Object = _target.getBounds(_root);
		if (gb.xMin > Stage.width) {
			_xOffset -= gb.xMax;
		}
		else if (gb.xMax < 0) {
			_xOffset += (Stage.width - gb.xMin);
		}
		// The engine is tweening _x on this instance, not the target.
		_target._x = v + _xOffset;
	}
		
	function get _y():Number {
		return _target._y;
	}
	
	function set _y(v:Number) {
		var gb:Object = _target.getBounds(_root);
		if (gb.yMin > Stage.height) {
			_yOffset -= gb.yMax;
		}
		else if (gb.yMax < 0) {
			_yOffset += (Stage.height - gb.yMin);
		}
		// The engine is tweening _y on this instance, not the target.
		_target._y = v + _yOffset;
	}
	
	/**
	 * Instances of this extension have to be deleted manually. Call this method first.
	 */
	public function destroy():Void {
		ZigoEngine.removeListener(this);
		_target = null;
	}
}