// -- #############################################################
// -- (c) 2003 Grigory Ryabov
// -- http://www.flash.plux.ru/
// -- #############################################################

import com.nuran.f3d.Vector3d;
import com.nuran.f3d.Vector4d;

class com.nuran.f3d.Matrix4x4 {
	public var e:Array;
	//00-----------------------------------------------------------------------------------
	function Matrix4x4() {
		e = new Array(3);
		e[0] = new Array(1.0, 0.0, 0.0, 0.0);
		e[1] = new Array(0.0, 1.0, 0.0, 0.0);
		e[2] = new Array(0.0, 0.0, 1.0, 0.0);
		e[3] = new Array(0.0, 0.0, 0.0, 1.0);
	}
	//00-----------------------------------------------------------------------------------
	public function addition(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Void {
		e[0][0] += __e00;	e[0][1] += __e01;	e[0][2] += __e02;	e[0][3] += __e03;
		e[1][0] += __e10;	e[1][1] += __e11;	e[1][2] += __e12;	e[1][3] += __e13;
		e[2][0] += __e20;	e[2][1] += __e21;	e[2][2] += __e22;	e[2][3] += __e23;
		e[3][0] += __e30;	e[3][1] += __e31;	e[3][2] += __e32;	e[3][3] += __e33;
	}
	//00-----------------------------------------------------------------------------------
	public function copy(__m:Matrix4x4):Void {
		e[0][0] = __m.e[0][0];	e[0][1] = __m.e[0][1];	e[0][2] = __m.e[0][2];	e[0][3] = __m.e[0][3];
		e[1][0] = __m.e[1][0];	e[1][1] = __m.e[1][1];	e[1][2] = __m.e[1][2];	e[1][3] = __m.e[1][3];
		e[2][0] = __m.e[2][0];	e[2][1] = __m.e[2][1];	e[2][2] = __m.e[2][2];	e[2][3] = __m.e[2][3];
		e[3][0] = __m.e[3][0];	e[3][1] = __m.e[3][1];	e[3][2] = __m.e[3][2];	e[3][3] = __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function copyFromArray(__Array4x4:Array):Void {
		e[0][0] = __Array4x4[0][0];		e[0][1] = __Array4x4[0][1];		e[0][2] = __Array4x4[0][2];		e[0][3] = __Array4x4[0][3];
		e[1][0] = __Array4x4[1][0];		e[1][1] = __Array4x4[1][1];		e[1][2] = __Array4x4[1][2];		e[1][3] = __Array4x4[1][3];
		e[2][0] = __Array4x4[2][0];		e[2][1] = __Array4x4[2][1];		e[2][2] = __Array4x4[2][2];		e[2][3] = __Array4x4[2][3];
		e[3][0] = __Array4x4[3][0];		e[3][1] = __Array4x4[3][1];		e[3][2] = __Array4x4[3][2];		e[3][3] = __Array4x4[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function copyFromList(__List:Array):Void {
		e[0][0] = __List[0];	e[0][1] = __List[1];	e[0][2] = __List[2];	e[0][3] = __List[3];
		e[1][0] = __List[4];	e[1][1] = __List[5];	e[1][2] = __List[6];	e[1][3] = __List[7];
		e[2][0] = __List[8];	e[2][1] = __List[9];	e[2][2] = __List[10];	e[2][3] = __List[11];
		e[3][0] = __List[12];	e[3][1] = __List[13];	e[3][2] = __List[14];	e[3][3] = __List[15];
	}
	//00-----------------------------------------------------------------------------------
	public function determinant():Number {
		return null;
	}
	//00-----------------------------------------------------------------------------------
	public function equality(__m:Matrix4x4):Boolean {
		return e[0][0] == __m.e[0][0] && e[0][1] == __m.e[0][1] && e[0][2] == __m.e[0][2] && e[0][3] == __m.e[0][3] && 
		e[1][0] == __m.e[1][0] && e[1][1] == __m.e[1][1] && e[1][2] == __m.e[1][2] && e[1][3] == __m.e[1][3] && 
		e[2][0] == __m.e[2][0] && e[2][1] == __m.e[2][1] && e[2][2] == __m.e[2][2] && e[2][3] == __m.e[2][3] && 
		e[3][0] == __m.e[3][0] && e[3][1] == __m.e[3][1] && e[3][2] == __m.e[3][2] && e[3][3] == __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function get():Matrix4x4 {
		var t = new Matrix4x4();
		t.e[0][0] = e[0][0];	t.e[0][1] = e[0][1];	t.e[0][2] = e[0][2];	t.e[0][3] = e[0][3];
		t.e[1][0] = e[1][0];	t.e[1][1] = e[1][1];	t.e[1][2] = e[1][2];	t.e[1][3] = e[1][3];
		t.e[2][0] = e[2][0];	t.e[2][1] = e[2][1];	t.e[2][2] = e[2][2];	t.e[2][3] = e[2][3];
		t.e[3][0] = e[3][0];	t.e[3][1] = e[3][1];	t.e[3][2] = e[3][2];	t.e[3][3] = e[3][3];
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getAddition(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = e[0][0]+__e00;	t.e[0][1] = e[0][1]+__e01;	t.e[0][2] = e[0][2]+__e02;	t.e[0][3] = e[0][3]+__e03;
		t.e[1][0] = e[1][0]+__e10;	t.e[1][1] = e[1][1]+__e11;	t.e[1][2] = e[1][2]+__e12;	t.e[1][3] = e[1][3]+__e13;
		t.e[2][0] = e[2][0]+__e20;	t.e[2][1] = e[2][1]+__e21;	t.e[2][2] = e[2][2]+__e22;	t.e[2][3] = e[2][3]+__e23;
		t.e[3][0] = e[3][0]+__e30;	t.e[3][1] = e[3][1]+__e31;	t.e[3][2] = e[3][2]+__e32;	t.e[3][3] = e[3][3]+__e33;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getElement(__rowNum:Number, __colNum:Number):Number {
		return e[__rowNum][__colNum];
	}
	//00-----------------------------------------------------------------------------------
	public function getMatrixAddition(__m:Matrix4x4):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = e[0][0]+__m.e[0][0];	t.e[0][1] = e[0][1]+__m.e[0][1];	t.e[0][2] = e[0][2]+__m.e[0][2];	t.e[0][3] = e[0][3]+__m.e[0][3];
		t.e[1][0] = e[1][0]+__m.e[1][0];	t.e[1][1] = e[1][1]+__m.e[1][1];	t.e[1][2] = e[1][2]+__m.e[1][2];	t.e[1][3] = e[1][3]+__m.e[1][3];
		t.e[2][0] = e[2][0]+__m.e[2][0];	t.e[2][1] = e[2][1]+__m.e[2][1];	t.e[2][2] = e[2][2]+__m.e[2][2];	t.e[2][3] = e[2][3]+__m.e[2][3];
		t.e[3][0] = e[3][0]+__m.e[3][0];	t.e[3][1] = e[3][1]+__m.e[3][1];	t.e[3][2] = e[3][2]+__m.e[3][2];	t.e[3][3] = e[3][3]+__m.e[3][3];
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getMatrixMultiplication(__m:Matrix4x4):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = __m.e[0][0]*e[0][0]+__m.e[1][0]*e[0][1]+__m.e[2][0]*e[0][2]+__m.e[3][0]*e[0][3];
		t.e[0][1] = __m.e[0][1]*e[0][0]+__m.e[1][1]*e[0][1]+__m.e[2][1]*e[0][2]+__m.e[3][1]*e[0][3];
		t.e[0][2] = __m.e[0][2]*e[0][0]+__m.e[1][2]*e[0][1]+__m.e[2][2]*e[0][2]+__m.e[3][2]*e[0][3];
		t.e[0][3] = __m.e[0][3]*e[0][0]+__m.e[1][3]*e[0][1]+__m.e[2][3]*e[0][2]+__m.e[3][3]*e[0][3];
		t.e[1][0] = __m.e[0][0]*e[1][0]+__m.e[1][0]*e[1][1]+__m.e[2][0]*e[1][2]+__m.e[3][0]*e[1][3];
		t.e[1][1] = __m.e[0][1]*e[1][0]+__m.e[1][1]*e[1][1]+__m.e[2][1]*e[1][2]+__m.e[3][1]*e[1][3];
		t.e[1][2] = __m.e[0][2]*e[1][0]+__m.e[1][2]*e[1][1]+__m.e[2][2]*e[1][2]+__m.e[3][2]*e[1][3];
		t.e[1][3] = __m.e[0][3]*e[1][0]+__m.e[1][3]*e[1][1]+__m.e[2][3]*e[1][2]+__m.e[3][3]*e[1][3];
		t.e[2][0] = __m.e[0][0]*e[2][0]+__m.e[1][0]*e[2][1]+__m.e[2][0]*e[2][2]+__m.e[3][0]*e[2][3];
		t.e[2][1] = __m.e[0][1]*e[2][0]+__m.e[1][1]*e[2][1]+__m.e[2][1]*e[2][2]+__m.e[3][1]*e[2][3];
		t.e[2][2] = __m.e[0][2]*e[2][0]+__m.e[1][2]*e[2][1]+__m.e[2][2]*e[2][2]+__m.e[3][2]*e[2][3];
		t.e[2][3] = __m.e[0][3]*e[2][0]+__m.e[1][3]*e[2][1]+__m.e[2][3]*e[2][2]+__m.e[3][3]*e[2][3];
		t.e[3][0] = __m.e[0][0]*e[3][0]+__m.e[1][0]*e[3][1]+__m.e[2][0]*e[3][2]+__m.e[3][0]*e[3][3];
		t.e[3][1] = __m.e[0][1]*e[3][0]+__m.e[1][1]*e[3][1]+__m.e[2][1]*e[3][2]+__m.e[3][1]*e[3][3];
		t.e[3][2] = __m.e[0][2]*e[3][0]+__m.e[1][2]*e[3][1]+__m.e[2][2]*e[3][2]+__m.e[3][2]*e[3][3];
		t.e[3][3] = __m.e[0][3]*e[3][0]+__m.e[1][3]*e[3][1]+__m.e[2][3]*e[3][2]+__m.e[3][3]*e[3][3];
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getMatrixSubtraction(__m:Matrix4x4):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = e[0][0]-__m.e[0][0];	t.e[0][1] = e[0][1]-__m.e[0][1];	t.e[0][2] = e[0][2]-__m.e[0][2];	t.e[0][3] = e[0][3]-__m.e[0][3];
		t.e[1][0] = e[1][0]-__m.e[1][0];	t.e[1][1] = e[1][1]-__m.e[1][1];	t.e[1][2] = e[1][2]-__m.e[1][2];	t.e[1][3] = e[1][3]-__m.e[1][3];
		t.e[2][0] = e[2][0]-__m.e[2][0];	t.e[2][1] = e[2][1]-__m.e[2][1];	t.e[2][2] = e[2][2]-__m.e[2][2];	t.e[2][3] = e[2][3]-__m.e[2][3];
		t.e[3][0] = e[3][0]-__m.e[3][0];	t.e[3][1] = e[3][1]-__m.e[3][1];	t.e[3][2] = e[3][2]-__m.e[3][2];	t.e[3][3] = e[3][3]-__m.e[3][3];
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getMultiplication(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = e[0][0]*__e00;	t.e[0][1] = e[0][1]*__e01;	t.e[0][2] = e[0][2]*__e02;	t.e[0][3] = e[0][3]*__e03;
		t.e[1][0] = e[1][0]*__e10;	t.e[1][1] = e[1][1]*__e11;	t.e[1][2] = e[1][2]*__e12;	t.e[1][3] = e[1][3]*__e13;
		t.e[2][0] = e[2][0]*__e20;	t.e[2][1] = e[2][1]*__e21;	t.e[2][2] = e[2][2]*__e22;	t.e[2][3] = e[2][3]*__e23;
		t.e[3][0] = e[3][0]*__e30;	t.e[3][1] = e[3][1]*__e31;	t.e[3][2] = e[3][2]*__e32;	t.e[3][3] = e[3][3]*__e33;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getScalarMultiplication(__s:Number):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = e[0][0]*__s;	t.e[0][1] = e[0][1]*__s;	t.e[0][2] = e[0][2]*__s;	t.e[0][3] = e[0][3]*__s;
		t.e[1][0] = e[1][0]*__s;	t.e[1][1] = e[1][1]*__s;	t.e[1][2] = e[1][2]*__s;	t.e[1][3] = e[1][3]*__s;
		t.e[2][0] = e[2][0]*__s;	t.e[2][1] = e[2][1]*__s;	t.e[2][2] = e[2][2]*__s;	t.e[2][3] = e[2][3]*__s;
		t.e[3][0] = e[3][0]*__s;	t.e[3][1] = e[3][1]*__s;	t.e[3][2] = e[3][2]*__s;	t.e[3][3] = e[3][3]*__s;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getSubtraction(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Matrix4x4 {
		var t:Matrix4x4 = new Matrix4x4 ();
		t.e[0][0] = e[0][0]-__e00;	t.e[0][1] = e[0][1]-__e01;	t.e[0][2] = e[0][2]-__e02;	t.e[0][3] = e[0][3]-__e03;
		t.e[1][0] = e[1][0]-__e10;	t.e[1][1] = e[1][1]-__e11;	t.e[1][2] = e[1][2]-__e12;	t.e[1][3] = e[1][3]-__e13;
		t.e[2][0] = e[2][0]-__e20;	t.e[2][1] = e[2][1]-__e21;	t.e[2][2] = e[2][2]-__e22;	t.e[2][3] = e[2][3]-__e23;
		t.e[3][0] = e[3][0]-__e30;	t.e[3][1] = e[3][1]-__e31;	t.e[3][2] = e[3][2]-__e32;	t.e[3][3] = e[3][3]-__e33;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getVectorMultiplication3d(__v:Vector3d):Vector3d {
		var h = e[0][3]*__v.x+e[1][3]*__v.y+e[2][3]*__v.z;
		var t:Vector3d = new Vector3d(0.0, 0.0, 0.0);
		t.x = (e[0][0]*__v.x+e[0][1]*__v.y+e[0][2]*__v.z+e[0][3]*__v.w) / h;
		t.y = (e[1][0]*__v.x+e[1][1]*__v.y+e[1][2]*__v.z+e[1][3]*__v.w) / h;
		t.z = (e[2][0]*__v.x+e[2][1]*__v.y+e[2][2]*__v.z+e[2][3]*__v.w) / h;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function getVectorMultiplication(__v:Vector4d):Vector4d {
		var t:Vector4d = new Vector4d(0.0, 0.0, 0.0, 1.0);
		t.x = e[0][0]*__v.x+e[0][1]*__v.y+e[0][2]*__v.z+e[0][3]*__v.w;
		t.y = e[1][0]*__v.x+e[1][1]*__v.y+e[1][2]*__v.z+e[1][3]*__v.w;
		t.z = e[2][0]*__v.x+e[2][1]*__v.y+e[2][2]*__v.z+e[2][3]*__v.w;
		t.w = e[3][0]*__v.x+e[3][1]*__v.y+e[3][2]*__v.z+e[3][3]*__v.w;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function greater(__m:Matrix4x4):Boolean {
		return e[0][0] < __m.e[0][0] && e[0][1] < __m.e[0][1] && e[0][2] < __m.e[0][2] && e[0][3] < __m.e[0][3] && 
		e[1][0] < __m.e[1][0] && e[1][1] < __m.e[1][1] && e[1][2] < __m.e[1][2] && e[1][3] < __m.e[1][3] && 
		e[2][0] < __m.e[2][0] && e[2][1] < __m.e[2][1] && e[2][2] < __m.e[2][2] && e[2][3] < __m.e[2][3] && 
		e[3][0] < __m.e[3][0] && e[3][1] < __m.e[3][1] && e[3][2] < __m.e[3][2] && e[3][3] < __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function greaterOrEqual(__m:Matrix4x4):Boolean {
		return e[0][0] <= __m.e[0][0] && e[0][1] <= __m.e[0][1] && e[0][2] <= __m.e[0][2] && e[0][3] <= __m.e[0][3] && 
		e[1][0] <= __m.e[1][0] && e[1][1] <= __m.e[1][1] && e[1][2] <= __m.e[1][2] && e[1][3] <= __m.e[1][3] && 
		e[2][0] <= __m.e[2][0] && e[2][1] <= __m.e[2][1] && e[2][2] <= __m.e[2][2] && e[2][3] <= __m.e[2][3] && 
		e[3][0] <= __m.e[3][0] && e[3][1] <= __m.e[3][1] && e[3][2] <= __m.e[3][2] && e[3][3] <= __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function identity():Void {
		e[0][1] = e[0][2]=e[0][3]=e[1][0]=e[1][2]=e[1][3]=e[2][0]=e[2][1]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[0][0] = e[1][1]=e[2][2]=e[3][3]=1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function inequality(__m:Matrix4x4):Boolean {
		return e[0][0] != __m.e[0][0] && e[0][1] != __m.e[0][1] && e[0][2] != __m.e[0][2] && e[0][3] != __m.e[0][3] && 
		e[1][0] != __m.e[1][0] && e[1][1] != __m.e[1][1] && e[1][2] != __m.e[1][2] && e[1][3] != __m.e[1][3] && 
		e[2][0] != __m.e[2][0] && e[2][1] != __m.e[2][1] && e[2][2] != __m.e[2][2] && e[2][3] != __m.e[2][3] && 
		e[3][0] != __m.e[3][0] && e[3][1] != __m.e[3][1] && e[3][2] != __m.e[3][2] && e[3][3] != __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function invert():Matrix4x4 {
		return null;
	}
	//00-----------------------------------------------------------------------------------
	public function less(__m:Matrix4x4):Boolean {
		return e[0][0] < __m.e[0][0] && e[0][1] < __m.e[0][1] && e[0][2] < __m.e[0][2] && e[0][3] < __m.e[0][3] && 
		e[1][0] < __m.e[1][0] && e[1][1] < __m.e[1][1] && e[1][2] < __m.e[1][2] && e[1][3] < __m.e[1][3] && 
		e[2][0] < __m.e[2][0] && e[2][1] < __m.e[2][1] && e[2][2] < __m.e[2][2] && e[2][3] < __m.e[2][3] && 
		e[3][0] < __m.e[3][0] && e[3][1] < __m.e[3][1] && e[3][2] < __m.e[3][2] && e[3][3] < __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function lessOrEqual(__m:Matrix4x4):Boolean {
		return e[0][0] <= __m.e[0][0] && e[0][1] <= __m.e[0][1] && e[0][2] <= __m.e[0][2] && e[0][3] <= __m.e[0][3] && 
		e[1][0] <= __m.e[1][0] && e[1][1] <= __m.e[1][1] && e[1][2] <= __m.e[1][2] && e[1][3] <= __m.e[1][3] && 
		e[2][0] <= __m.e[2][0] && e[2][1] <= __m.e[2][1] && e[2][2] <= __m.e[2][2] && e[2][3] <= __m.e[2][3] && 
		e[3][0] <= __m.e[3][0] && e[3][1] <= __m.e[3][1] && e[3][2] <= __m.e[3][2] && e[3][3] <= __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function matrixAddition(__m:Matrix4x4):Void {
		e[0][0] += __m.e[0][0];	e[0][1] += __m.e[0][1];	e[0][2] += __m.e[0][2];	e[0][3] += __m.e[0][3];
		e[1][0] += __m.e[1][0];	e[1][1] += __m.e[1][1];	e[1][2] += __m.e[1][2];	e[1][3] += __m.e[1][3];
		e[2][0] += __m.e[2][0];	e[2][1] += __m.e[2][1];	e[2][2] += __m.e[2][2];	e[2][3] += __m.e[2][3];
		e[3][0] += __m.e[3][0];	e[3][1] += __m.e[3][1];	e[3][2] += __m.e[3][2];	e[3][3] += __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function matrixMultiplication(__m:Matrix4x4):Void {
		var t:Matrix4x4 = new Matrix4x4();
		t.e[0][0] = __m.e[0][0]*e[0][0]+__m.e[1][0]*e[0][1]+__m.e[2][0]*e[0][2]+__m.e[3][0]*e[0][3];
		t.e[0][1] = __m.e[0][1]*e[0][0]+__m.e[1][1]*e[0][1]+__m.e[2][1]*e[0][2]+__m.e[3][1]*e[0][3];
		t.e[0][2] = __m.e[0][2]*e[0][0]+__m.e[1][2]*e[0][1]+__m.e[2][2]*e[0][2]+__m.e[3][2]*e[0][3];
		t.e[0][3] = __m.e[0][3]*e[0][0]+__m.e[1][3]*e[0][1]+__m.e[2][3]*e[0][2]+__m.e[3][3]*e[0][3];
		t.e[1][0] = __m.e[0][0]*e[1][0]+__m.e[1][0]*e[1][1]+__m.e[2][0]*e[1][2]+__m.e[3][0]*e[1][3];
		t.e[1][1] = __m.e[0][1]*e[1][0]+__m.e[1][1]*e[1][1]+__m.e[2][1]*e[1][2]+__m.e[3][1]*e[1][3];
		t.e[1][2] = __m.e[0][2]*e[1][0]+__m.e[1][2]*e[1][1]+__m.e[2][2]*e[1][2]+__m.e[3][2]*e[1][3];
		t.e[1][3] = __m.e[0][3]*e[1][0]+__m.e[1][3]*e[1][1]+__m.e[2][3]*e[1][2]+__m.e[3][3]*e[1][3];
		t.e[2][0] = __m.e[0][0]*e[2][0]+__m.e[1][0]*e[2][1]+__m.e[2][0]*e[2][2]+__m.e[3][0]*e[2][3];
		t.e[2][1] = __m.e[0][1]*e[2][0]+__m.e[1][1]*e[2][1]+__m.e[2][1]*e[2][2]+__m.e[3][1]*e[2][3];
		t.e[2][2] = __m.e[0][2]*e[2][0]+__m.e[1][2]*e[2][1]+__m.e[2][2]*e[2][2]+__m.e[3][2]*e[2][3];
		t.e[2][3] = __m.e[0][3]*e[2][0]+__m.e[1][3]*e[2][1]+__m.e[2][3]*e[2][2]+__m.e[3][3]*e[2][3];
		t.e[3][0] = __m.e[0][0]*e[3][0]+__m.e[1][0]*e[3][1]+__m.e[2][0]*e[3][2]+__m.e[3][0]*e[3][3];
		t.e[3][1] = __m.e[0][1]*e[3][0]+__m.e[1][1]*e[3][1]+__m.e[2][1]*e[3][2]+__m.e[3][1]*e[3][3];
		t.e[3][2] = __m.e[0][2]*e[3][0]+__m.e[1][2]*e[3][1]+__m.e[2][2]*e[3][2]+__m.e[3][2]*e[3][3];
		t.e[3][3] = __m.e[0][3]*e[3][0]+__m.e[1][3]*e[3][1]+__m.e[2][3]*e[3][2]+__m.e[3][3]*e[3][3];
		copy(t);
	}
	//00-----------------------------------------------------------------------------------
	public function matrixSubtraction(__m:Matrix4x4):Void {
		e[0][0] -= __m.e[0][0];	e[0][1] -= __m.e[0][1];	e[0][2] -= __m.e[0][2];	e[0][3] -= __m.e[0][3];
		e[1][0] -= __m.e[1][0];	e[1][1] -= __m.e[1][1];	e[1][2] -= __m.e[1][2];	e[1][3] -= __m.e[1][3];
		e[2][0] -= __m.e[2][0];	e[2][1] -= __m.e[2][1];	e[2][2] -= __m.e[2][2];	e[2][3] -= __m.e[2][3];
		e[3][0] -= __m.e[3][0];	e[3][1] -= __m.e[3][1];	e[3][2] -= __m.e[3][2];	e[3][3] -= __m.e[3][3];
	}
	//00-----------------------------------------------------------------------------------
	public function multiplication(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Void {
		e[0][0] *= __e00;	e[0][1] *= __e01;	e[0][2] *= __e02;	e[0][3] *= __e03;
		e[1][0] *= __e10;	e[1][1] *= __e11;	e[1][2] *= __e12;	e[1][3] *= __e13;
		e[2][0] *= __e20;	e[2][1] *= __e21;	e[2][2] *= __e22;	e[2][3] *= __e23;
		e[3][0] *= __e30;	e[3][1] *= __e31;	e[3][2] *= __e32;	e[3][3] *= __e33;
	}
	//00-----------------------------------------------------------------------------------
	public function normalize() {
		var f:Number = 1.0/e[3][3];
		e[0][0] *= f;	e[0][1] *= f;	e[0][2] *= f;
		e[1][0] *= f;	e[1][1] *= f;	e[1][2] *= f;
		e[2][0] *= f;	e[2][1] *= f;	e[2][2] *= f;
	}
	//00-----------------------------------------------------------------------------------
	public function rotationMatrix(__a:Vector3d, __s:Number, __c:Number):Void {
		var t:Number = 1.0-__c;
		var tx:Number = t*__a.x;
		var ty:Number = t*__a.y;
		var tz:Number = t*__a.z;
		e[0][0] = tx*__a.x+__c;
		e[0][1] = ty*__a.x-__s*__a.z;
		e[0][2] = tz*__a.x+__s*__a.y;
		e[0][3] = 0.0;
		e[1][0] = tx*__a.y+__s*__a.z;
		e[1][1] = ty*__a.y+__c;
		e[1][2] = tz*__a.y-__s*__a.x;
		e[1][3] = 0.0;
		e[2][0] = tx*__a.z-__s*__a.y;
		e[2][1] = ty*__a.z+__s*__a.x;
		e[2][2] = tz*__a.z+__c;
		e[2][3] = 0.0;
		e[3][0] = 0.0;
		e[3][1] = 0.0;
		e[3][2] = 0.0;
		e[3][3] = 1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function rotationXMatrix(__s:Number, __c:Number):Void {
		e[0][1] = e[0][2]=e[0][3]=e[1][0]=e[1][3]=e[2][0]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[0][0] = 1.0;
		e[1][1] = __c;
		e[1][2] = __s;
		e[2][1] = -__s;
		e[2][2] = __c;
		e[3][3] = 1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function rotationYMatrix(__s:Number, __c:Number):Void {
		e[0][1] = e[0][3]=e[1][0]=e[1][2]=e[1][3]=e[2][1]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[1][1] = 1.0;
		e[0][0] = __c;
		e[0][2] = -__s;
		e[2][0] = __s;
		e[2][2] = __c;
		e[3][3] = 1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function rotationZMatrix(__s:Number, __c:Number):Void {
		e[0][2] = e[0][3]=e[1][2]=e[1][3]=e[2][0]=e[2][1]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[2][2] = 1.0;
		e[0][0] = __c;
		e[0][1] = __s;
		e[1][0] = -__s;
		e[1][1] = __c;
		e[3][3] = 1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function scalarMultiplication(__s:Number):Void {
		e[0][0] *= __s;	e[0][1] *= __s;	e[0][2] *= __s;	e[0][3] *= __s;
		e[1][0] *= __s;	e[1][1] *= __s;	e[1][2] *= __s;	e[1][3] *= __s;
		e[2][0] *= __s;	e[2][1] *= __s;	e[2][2] *= __s;	e[2][3] *= __s;
		e[3][0] *= __s;	e[3][1] *= __s;	e[3][2] *= __s;	e[3][3] *= __s;
	}
	//00-----------------------------------------------------------------------------------
	public function scaleMatrix(__sx:Number, __sy:Number, __sz:Number):Void {
		e[0][1] = e[0][2]=e[0][3]=e[1][0]=e[1][2]=e[1][3]=e[2][0]=e[2][1]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[0][0] = __sx;
		e[1][1] = __sy;
		e[2][2] = __sz;
		e[3][3] = 1.0;
	}
	//00-----------------------------------------------------------------------------------
	public function set(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Void {
		e[0][0] = __e00;	e[0][1] = __e01;	e[0][2] = __e02;	e[0][3] = __e03;
		e[1][0] = __e10;	e[1][1] = __e11;	e[1][2] = __e12;	e[1][3] = __e13;
		e[2][0] = __e20;	e[2][1] = __e21;	e[2][2] = __e22;	e[2][3] = __e23;
		e[3][0] = __e30;	e[3][1] = __e31;	e[3][2] = __e32;	e[3][3] = __e33;
	}
	//00-----------------------------------------------------------------------------------
	public function setElement(__rowNum:Number, __colNum:Number, __val:Number):Void {
		e[__rowNum][__colNum] = __val;
	}
	//00-----------------------------------------------------------------------------------
	public function subtraction(__e00:Number, __e01:Number, __e02:Number, __e03:Number, __e10:Number, __e11:Number, __e12:Number, __e13:Number, __e20:Number, __e21:Number, __e22:Number, __e23:Number, __e30:Number, __e31:Number, __e32:Number, __e33:Number):Void {
		e[0][0] -= __e00;	e[0][1] -= __e01;	e[0][2] -= __e02;	e[0][3] -= __e03;
		e[1][0] -= __e10;	e[1][1] -= __e11;	e[1][2] -= __e12;	e[1][3] -= __e13;
		e[2][0] -= __e20;	e[2][1] -= __e21;	e[2][2] -= __e22;	e[2][3] -= __e23;
		e[3][0] -= __e30;	e[3][1] -= __e31;	e[3][2] -= __e32;	e[3][3] -= __e33;
	}
	//00-----------------------------------------------------------------------------------
	public function toString():String {
		return ("< "+"<"+e[0][0]+", "+e[0][1]+", "+e[0][2]+", "+e[0][3]+">"+", "+"<"+e[1][0]+", "+e[1][1]+", "+e[1][2]+">"+", "+e[1][3]+", "+"<"+e[2][0]+", "+e[2][1]+", "+e[2][2]+", "+e[2][3]+">"+"<"+e[3][0]+", "+e[3][1]+", "+e[3][2]+", "+e[3][3]+">"+" >");
	}
	//00-----------------------------------------------------------------------------------
	public function translationMatrix(__tx:Number, __ty:Number, __tz:Number):Void {
		e[0][1] = e[0][2]=e[1][0]=e[1][2]=e[2][0]=e[2][1]=e[3][0]=e[3][1]=e[3][2]=0.0;
		e[0][0] = e[1][1]=e[2][2]=e[3][3]=1.0;
		e[0][3] = __tx;
		e[1][3] = __ty;
		e[2][3] = __tz;
	}
	//00-----------------------------------------------------------------------------------
	public function transpose():Matrix3x3 {
		var t:Matrix3x3 = new Matrix3x3();
		t.e[0][0] = e[0][0];	t.e[0][1] = e[1][0];	t.e[0][2] = e[2][0];	t.e[0][3] = e[3][0];
		t.e[1][0] = e[0][1];	t.e[1][1] = e[1][1];	t.e[1][2] = e[2][1];	t.e[1][3] = e[3][1];
		t.e[2][0] = e[0][2];	t.e[2][1] = e[1][2];	t.e[2][2] = e[2][2];	t.e[2][3] = e[3][2];
		t.e[3][0] = e[0][3];	t.e[3][1] = e[1][3];	t.e[3][2] = e[2][3];	t.e[3][3] = e[3][3];
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function vectorMultiplication3d(__v:Vector3d):Vector3d {
		var h = e[0][3]*__v.x+e[1][3]*__v.y+e[2][3]*__v.z;
		var t:Vector3d = new Vector3d(0.0, 0.0, 0.0);
		t.x = (e[0][0]*__v.x+e[0][1]*__v.y+e[0][2]*__v.z+e[0][3]*__v.w) / h;
		t.y = (e[1][0]*__v.x+e[1][1]*__v.y+e[1][2]*__v.z+e[1][3]*__v.w) / h;
		t.z = (e[2][0]*__v.x+e[2][1]*__v.y+e[2][2]*__v.z+e[2][3]*__v.w) / h;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function vectorMultiplication(__v:Vector4d):Vector4d {
		var t:Vector4d = new Vector4d(0.0, 0.0, 0.0, 1.0);
		t.x = e[0][0]*__v.x+e[0][1]*__v.y+e[0][2]*__v.z+e[0][3]*__v.w;
		t.y = e[1][0]*__v.x+e[1][1]*__v.y+e[1][2]*__v.z+e[1][3]*__v.w;
		t.z = e[2][0]*__v.x+e[2][1]*__v.y+e[2][2]*__v.z+e[2][3]*__v.w;
		t.w = e[3][0]*__v.x+e[3][1]*__v.y+e[3][2]*__v.z+e[3][3]*__v.w;
		return t;
	}
	//00-----------------------------------------------------------------------------------
	public function zero():Void {
		e[0][0] = e[0][1]=e[0][2]=e[0][3]=e[1][0]=e[1][1]=e[1][2]=e[1][3]=e[2][0]=e[2][1]=e[2][2]=e[2][3]=e[3][0]=e[3][1]=e[3][2]=e[3][3]=0.0;
	}
}