/* -------------------------------------------------------------------------------// FLASH FMP - Filter Managing Prototypes ( www.flash-fmp.de )// version: 2.0.0 // by Danilo Sandner ( www.danilosandner.de )// and Björn Wibben ( www.di-image.de )// thanks for co-development goes to Moses Gunesch ( www.mosessupposes.com/fuse )--------------------------------------------------------------------------------------------------------------------------------------------------------------------- initialize  ([targ:MovieClip,targ:Button,targ:TextField])	initializes FMP features to all target objects passed. arguments are optional. 	if nothing is passed (recommended), mc-, button- and textfield prototypes are automaticly initialized.- deinitialize  ([targ:MovieClip,targ:Button,targ:TextField])	deinitializes FMP features from all target objects passed. arguments are optional. 	if nothing is passed, mc-, button- and textfield prototypes are automaticly deinitialized.- writeFilter  (targ, filter* [,propsObj:Object]):Number 	applies or overwrites an existing filter, returns index in target's filters array (or -1 if fails) 	-propsObj: optional, a generic object customizing the new filter, like {blurX:50,quality:1}- removeFilter (targ, filter*):Boolean 	clears filter. returns true or false for success.* filter instance, string (like "BlurFilter" or "Blur"), or class constr. (flash.filters.BlurFilter)in addition to these methods every initialized mc-, button- or textfield- instance now provides you with "built in" filter-shortcut properties (e.g. Blur_blurX, Blur_quality, etc). you can handle filters now very much the same as e.g. x / y position or other native properties- traceAllFilters () 	lists all filter-shortcut properties (Blur_blurX, etc.) to the output panel for reference---------------------------------------------------------------------------------- */import flash.filters.*;class de.flash_fmp.FMP {			public static function simpleSetup(){ 		initialize(); 	}	private static var $gro:Object;	private static var $sro:Object;	private static var $fclasses:Object; 	private static var $shortcuts:Object;		public static function initialize():Void { 		if ($fclasses==undefined) {			$shortcuts = {				getFilterIndex:function(f):Number 						{ return FMP.getFilterIndex(this,f); },				writeFilter:function(f,pObj:Object):Number				{ return FMP.writeFilter(this,f,pObj); },				removeFilter:function(f):Boolean 						{ return FMP.removeFilter(this,f); },				traceAllFilters:function():Void 						{ FMP.traceAllFilters(); }			};			$fclasses = {	BevelFilter:BevelFilter, 							BlurFilter:BlurFilter,							ColorMatrixFilter:ColorMatrixFilter,							ConvolutionFilter:ConvolutionFilter,							DisplacementMapFilter:DisplacementMapFilter,							DropShadowFilter:DropShadowFilter,							GlowFilter:GlowFilter,							GradientBevelFilter:GradientBevelFilter,							GradientGlowFilter:GradientGlowFilter			};			$gro = { 				__resolve:function(name) { 					var f = function () {						var $splitname = name.split("_");						var $filtername = $splitname[0] + "Filter";						var $index = getFilterIndex(this, $filtername);						if($index == -1){ 							var fake:BitmapFilter = new $fclasses[$filtername];							if(typeof fake[$splitname[1]] == 'number'){								return 0; 							} else {								return null; 								}						}						return this.filters[$index][$splitname[1]]; 					}					return f;					}			};			$sro = { 				__resolve:function(name) { 					var f = function (wert) {						var $splitname = name.split("_");						var $filtername = $splitname[0] + "Filter";						var $index = getFilterIndex(this, $filtername);						if ($index == -1) {							$index = writeFilter(this, $filtername);						}						var $filters_temp = this.filters;						$filters_temp[$index][$splitname[1]] = wert;						writeFilter(this, $filters_temp[$index]);						this.name = wert;					}					return f;					}			};		}		if (arguments.length==0) {			arguments.push(MovieClip.prototype, Button.prototype, TextField.prototype);		}		if (arguments[0]==null) return; 		var valid:Array = [MovieClip,Button,TextField]; 				var addProp:Function = function(o,p) {			o.addProperty(p, $gro[p], $sro[p]);			_global.ASSetPropFlags(o,p,3); 		}				for (var i in arguments) {			var ok:Boolean = false;			for (var j in valid) if (arguments[i] instanceof valid[j] || arguments[i]==valid[j].prototype) {				ok = true;				break;			}			if (!ok) {				trace('**** FMP cannot initialize argument '+i+' (BitmapFilters cannot be applied to this object type) ****');				continue;			}						if (arguments[i].$fmp_initialized) {				continue;			}						for (var $filtername in $fclasses) {				var $f:BitmapFilter = new $fclasses[$filtername];				for (var b in $f) {					if (typeof $f[b]=='function') continue; 					var eigenschaft = $filtername.substr(0, -6)+"_"+b;					addProp(arguments[i],eigenschaft); 				}			}			for (var s in $shortcuts) {				arguments[i][s] = $shortcuts[s];				_global.ASSetPropFlags(arguments[i],s,7); 			}			arguments[i].$fmp_initialized = true; 					}				_global.FMP = FMP;		for (var i in $fclasses) _global[i] = $fclasses[i];		}		public static function deinitialize():Void { 		if ($fclasses==undefined) return;		if (arguments.length==0) {			arguments.push(MovieClip.prototype, Button.prototype, TextField.prototype);		}				for (var i in arguments) {			for (var $filtername in $fclasses) {				var $f:BitmapFilter = new $fclasses[$filtername];				for (var b in $f) {					if (typeof $f[b]=='function') continue; 					var eigenschaft = $filtername.substr(0, -6)+"_"+b;					_global.ASSetPropFlags(arguments[i],eigenschaft,0,2); 					delete arguments[i][eigenschaft];				}			}			for (var s in $shortcuts) {				_global.ASSetPropFlags(arguments[i],s,0,2); 				delete arguments[i][s];			}			delete (arguments[i].$fmp_initialized);		}	}		public static function getFilterIndex($obj, $myFilter):Number {		if(!$obj.$fmp_initialized) return;		$myFilter = $getInstance($myFilter); 		if ($myFilter === null) return -1; 		var $filters_temp = $obj.filters;		for (var i=0; i<=$filters_temp.length; i++) {		   if ($filters_temp[i].__proto__ == $myFilter.__proto__ ) { 				return i;			} 		}		return -1;	}		public static function writeFilter($obj, $myFilter, $propsObj):Number {		if(!$obj.$fmp_initialized) return;		$myFilter = $getInstance($myFilter);		if ($myFilter === null) return -1;		var $filters_temp = $obj.filters;		var $index = getFilterIndex($obj,$myFilter);		if($index == -1){			$filters_temp.push($myFilter);			$index = $filters_temp.length-1; 		} else {				$filters_temp[$index] = $myFilter;			}							if(typeof $propsObj == "object"){ 			for(var prop in $propsObj){				if($filters_temp[$index][prop] != undefined){ 					$filters_temp[$index][prop] = $propsObj[prop];				} 				}			} 				$obj.filters = $filters_temp;		var $index = getFilterIndex($obj,$myFilter); 		return($index);		}		public static function removeFilter($obj,$myFilter):Boolean {		if(!$obj.$fmp_initialized) return;		$myFilter = $getInstance($myFilter);		var $filters_temp = $obj.filters;		var $index = getFilterIndex($obj,$myFilter);		if($index == -1){			return (false);		} 		$filters_temp.splice($index,1);		$obj.filters = $filters_temp;		return true;	}		public static function traceAllFilters():Void {		if ($fclasses==undefined) initialize(null); 		trace("------ FMP filter properties ------");		trace(" ");		for (var $filtername in $fclasses) {			trace($filtername);			var $f:BitmapFilter = new $fclasses[$filtername];			for (var b in $f) {				if (typeof $f[b]=='function') continue; 				trace('	- '+$filtername.substr(0, -6)+'_'+b+":"+typeof $f[b]); 			}			trace(" ");		}	}		// -- private  --	private static function $getInstance($myFilter):BitmapFilter { 		if ($myFilter instanceof BitmapFilter) return $myFilter; 		if (typeof $myFilter == "function") {			for (var j in $fclasses) {				if( $myFilter == $fclasses[j]) return (new $fclasses[j]());			}		}		if (typeof $myFilter == "string") {			if ($myFilter.substr(-6)!='Filter') $myFilter+='Filter'; 			for (var j in $fclasses) {				if (j==$myFilter) return (new $fclasses[j]());			}		}		return null;	}}