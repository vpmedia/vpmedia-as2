/*Class	ScrollPanePackage	ch.component.scrollbarProject	PackageCHCreated by :	Tabin Cedric - thecaptainCreated at :	24 avr. 07*/import ch.component.scrollbar.ScrollBar;import ch.component.scrollbar.ScrollType;import ch.component.scrollbar.ScrollHandButton;/** * Represents a {@code ScrollPane}. * <p>A <code>ScrollPane</code> allows you to simply manage a resizable * content that can be scrolled vertically and horizontally.</p> *  * @author		Tabin Cedric - thecaptain * @since		24 avr. 07 * @version		1.0 */class ch.component.scrollbar.ScrollPane{	//---------//	//Constants//	//---------//		//---------//	//Variables//	//---------//	private var _content:MovieClip;	private var _mask:MovieClip;	private var _vScrollBar:ScrollBar;	private var _hScrollBar:ScrollBar;	private var _sHandButton:ScrollHandButton;		//-----------//	//Constructor//	//-----------//		/**	 * Creates a new <code>ScrollPane</code> object.	 * 	 * @param	content				The content clip.	 * @param	mask				The mask of the content.	 * @param	setMaskDynamically	Defines if the <code>setMask</code> method should be used (<code>false</code> by default).	 */	public function ScrollPane(content:MovieClip, mask:MovieClip, setMaskDynamically:Boolean)	{		if (content == null) throw new Error(this+".<init> : content is not defined");		if (mask == null) throw new Error(this+".<init> : mask is not defined");				_mask = mask;		_content = content;		_vScrollBar = null;		_hScrollBar = null;		_sHandButton = null;			if (setMaskDynamically) content.setMask(mask);		}		//--------------//	//Public methods//	//--------------//		/**	 * Retrieves a vertical <code>ScrollBar</code> for this <code>ContentPane</code>.	 * <p>Note that the <code>ScrollBar</code> object returned is always the same. It means	 * that the following test will return <code>true</code> :	 * <pre>var a:ScrollBar = myContentPane.getVerticalScrollBar();	 * var b:ScrollBar = myContentPane.getVerticalScrollBar();	 * trace(a == b); //true	 * </pre></p>	 * <p>If this method is not called, the vertical <code>ScrollBar</code> won't be created.</p>	 * 	 * @return	A <code>ScrollBar</code> object.	 */	public function getVerticalScrollBar(Void):ScrollBar	{		if (_vScrollBar == null) _vScrollBar = ScrollBar.create(_content, _mask, ScrollType.VERTICAL, false);				return _vScrollBar;	}		/**	 * Retrieves an horizontal <code>ScrollBar</code> for this <code>ContentPane</code>.	 * <p>Note that the <code>ScrollBar</code> object returned is always the same. It means	 * that the following test will return <code>true</code> :	 * <pre>var a:ScrollBar = myContentPane.getHorizontalScrollBar();	 * var b:ScrollBar = myContentPane.getHorizontalScrollBar();	 * trace(a == b); //true	 * </pre></p>	 * <p>If this method is not called, the horizontal <code>ScrollBar</code> won't be created.</p>	 * 	 * @return	A <code>ScrollBar</code> object.	 */	public function getHorizontalScrollBar(Void):ScrollBar	{		if (_hScrollBar == null) _hScrollBar = ScrollBar.create(_content, _mask, ScrollType.HORIZONTAL, false);				return _hScrollBar;	}		/**	 * Refresh the content of the <code>ScrollPane</code>.	 * <p>This method should be called everytime a size update happened to the	 * content clip.</p>	 * 	 * @param	source			The source object that perform the refresh or {@code null}.	 * @param	updateContent	Indicates if the content must be moved when it is out of bounds (false by default).	 */	public function refresh(source:Object, updateContent:Boolean):Void	{		if (_hScrollBar != null) _hScrollBar.getModel().refresh(source, updateContent);		if (_vScrollBar != null) _vScrollBar.getModel().refresh(source, updateContent);	}		/**	 * Represent the current instance into a String.	 *	 * @return	A String representing the ScrollPane instance.	 */	public function toString(Void):String	{		return "ch.component.scrollbar.ScrollPane";	}		//---------------//	//Private methods//	//---------------//}